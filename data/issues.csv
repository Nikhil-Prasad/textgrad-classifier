repo,created_at,label,title,body
facebook/react,2023-08-26 06:33:37,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

Private repo cannot give access to application

### Repro steps

1. Run application

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.28.0-035a41c4e

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28171:41
    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24827:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24996:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:57406:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-07-28 05:16:12,bug,[DevTools Bug]: Devtools extension build failing in windows and ubuntu ,"### Website or app

N/A

### Repro steps

Been working on react devtools extension for a while now, my mac got some issue so i switched to a windows machine but currently i am unable to build the react devtool extension and run it locally here is the napshot of the error
![Windows PowerShell 7_28_2023 10_43_05 AM](https://github.com/facebook/react/assets/72331432/b6487d72-4c4f-46e2-b04e-0469de33e50b)



### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-07-13 21:58:31,bug,[DevTools Bug]: Deprecated __REACT_DEVTOOLS_GLOBAL_HOOK__ ????,"### Website or app

https://github.com/open-source-labs/reactime/tree/master/src

### Repro steps

Hi, I have heard that the new versions of React will not support the REACT_DEVTOOLS_GLOBAL_HOOK. If there any information about this update that you can share. Is there a new way to achieve the same result of using the REACT_DEVTOOLS_GLOBAL_HOOK but with a different method? What is the future of React without the REACT_DEVTOOLS_GLOBAL_HOOK?

Reactime and React Inspector in the Chrome store use this hook

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-06-14 02:31:20,bug,"[DevTools Bug] Cannot remove node ""0"" because no matching node was found in the Store.","### Website or app

local

### Repro steps

open react-devtools

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.27.8-2468a8735

### Error message (automated)

Cannot remove node ""0"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at /Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:39:338605
    at f.emit (/Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:39:283790)
    at /Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:39:285331
    at /Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:39:677861
    at Array.forEach (<anonymous>)
    at Lh.e.onmessage (/Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:39:677845)
    at A.t (/Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:39:2836)
    at A.emit (node:events:513:28)
    at e.exports.F (/Users/wangx/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:3:38972)
    at e.exports.emit (node:events:513:28)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-06-03 11:29:44,bug,"[DevTools Bug] Cannot remove node ""103"" because no matching node was found in the Store.","### Website or app

localhost

### Repro steps

-

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.8-2468a8735

### Error message (automated)

Cannot remove node ""103"" because no matching node was found in the Store.

### Error call stack (automated)

```text
emit@moz-extension://a02c2c83-f439-4a45-972b-928bb0916901/build/main.js:27059:22
bridge_Bridge/this._wallUnlisten<@moz-extension://a02c2c83-f439-4a45-972b-928bb0916901/build/main.js:27228:14
listener@moz-extension://a02c2c83-f439-4a45-972b-928bb0916901/build/main.js:57497:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-05-26 12:03:19,bug,"[DevTools Bug]: App not recognized in Firefox, but works in Chrome","### Website or app

-

### Repro steps

On both Firefox 103 and 104 the react devtools extension says: ""This page doesn't appear to be using React"".

On the most recent version of Chrome it's working just fine.

I cannot share the project since it's a private project unfortunately, but I suspect this is a regression introduced with the recent https://github.com/facebook/react/pull/26765

Especially since the devtools were working perfectly fine until maybe one or two weeks ago.

It _does_ work in incognito mode in Firefox.

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-05-09 15:33:15,bug,[DevTools Bug]: Using different React instances across multiple frames throws errors,"### Website or app

https://codepen.io/mesoptier/pen/qBJopod

### Repro steps

1. Visit the codepen linked above.
2. Be sure to open the Debug View, so codepen doesn't add any additional iframes ([more info](https://blog.codepen.io/documentation/debug-view/)).
3. Observe:
   - Warning in the Console tab: `Invalid renderer id ""1""`.
   - Error in the Components tab: `Uncaught Error: Cannot add node ""3"" because a node with that id is already in the Store`.
   - After dismissing the error, all components seem to be accounted for (you might need to adjust the ""Hide components where..."" option).

In my actual application the error pops up for every change in the tree, making the devtools virtually unusable.

Note: This only seems to happen if the iframe is added some time after the initial React tree was mounted in the parent window. When I remove the `setTimeout` so the iframe is added synchronously, I no longer see any warnings.

Related issues:
- https://github.com/facebook/react/issues/26787
- https://github.com/facebook/react/issues/26793

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version ~(automated)~ (manual)

4.27.7 (5/7/2023) in Google Chrome Version 112.0.5615.165 (Official Build) (64-bit)

### Error message ~(automated)~ (manual)

Cannot add node ""3"" because a node with that id is already in the Store.

### Error call stack ~(automated)~ (manual)

```
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29031:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27054:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27223:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:57493:39)
```

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-05-08 06:59:51,bug,"[DevTools Bug] Cannot remove node ""226752"" because no matching node was found in the Store.","### Website or app

https://travel.testsigma.com/

### Repro steps

https://travel.testsigma.com/

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.6-7f8c501f6

### Error message (automated)

Cannot remove node ""226752"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28710:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26606:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26775:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:57029:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-05-02 13:23:54,bug,"[DevTools Bug] Cannot remove node ""197"" because no matching node was found in the Store.","### Website or app

http://localhost:3000/

### Repro steps

1. accessing react dev from a local app''


### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.6-7f8c501f6

### Error message (automated)

Cannot remove node ""197"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28710:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26606:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26775:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:57029:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-04-25 04:16:47,bug,[DevTools Bug]: Unable to build the extension locally,"### Website or app

N/A

### Repro steps

I am trying to build the chrome extension for react dev tools locally to test changes as i am looking forward to fix this issue https://github.com/facebook/react/issues/26200, but there seem to be some error with the packages! looking forward to get some help
![Windows PowerShell 4_25_2023 9_44_03 AM](https://user-images.githubusercontent.com/72331432/234173125-657274ae-9d5b-41b6-bf34-ed148625f73f.png)


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-04-21 21:27:01,bug,"[DevTools Bug]: can not build react devtools for local development, instructions lead to error","### Website or app

https://github.com/facebook/react/tree/main/packages/react-devtools-extensions

### Repro steps

Follow the instructions here to build local version of react devtools extension: https://github.com/facebook/react/tree/main/packages/react-devtools-extensions

```
git clone https://github.com/facebook/react.git 
cd react
yarn install
yarn build-for-devtools
```

Stuck on this step everytime `yarn build-for-devtools`:
```
D:\\Other\\react\\node_modules\\flow-parser\\flow_parser.js:807
throw a}function
^

Error: SignedSource.signFile(...): Cannot sign file without token: <<SignedSource::*O*zOeWoEQle#+L!plEphiEmie@IsG>>
    at Object.<anonymous> (D:\\Other\\react\\node_modules\\signedsource\\index.js:20:28)
    at Module._compile (node:internal/modules/cjs/loader:1196:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1250:10)
    at Module.load (node:internal/modules/cjs/loader:1074:32)
    at Function.Module._load (node:internal/modules/cjs/loader:909:12)
    at Module.require (node:internal/modules/cjs/loader:1098:19)
    at require (node:internal/modules/cjs/helpers:108:18)
    at Object.<anonymous> (D:\\Other\\react\\scripts\\rollup\\packaging.js:18:37)
    at Module._compile (node:internal/modules/cjs/loader:1196:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1250:10)
```

Is there anything else I need to set up in order to make this work?

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-04-05 14:03:28,bug,"[DevTools Bug] Could not find node with id ""364"" in commit tree","### Website or app

private

### Repro steps

private

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.3-28ce1c171

### Error message (automated)

Could not find node with id ""364"" in commit tree

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27480:13
    at Map.forEach (<anonymous>)
    at RankedChartBuilder_getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27476:24)
    at ProfilingCache_ProfilingCache.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27592:11)
    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:45996:32)
    at mf (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13756:7)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18405:11)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17982:11)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17871:23)
    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17851:5)
```


### Error component stack (automated)

```text
at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:45975:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37999:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:55844:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39532:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39704:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39734:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39704:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44994:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44422:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32227:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32872:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40129:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56352:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not find node with id  in commit tree in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-03-28 19:02:59,bug,[DevTools Bug]: copy operations don't work in Chrome,"### Website or app

https://react.dev

### Repro steps

1. Go to components tab.
2. For any component, try to copy the value in props, hooks etc. to clipboard.

![image](https://user-images.githubusercontent.com/75756768/228340421-a901498a-1308-4e8f-b502-989f4c60331f.png)


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-03-17 16:54:47,bug,[DevTools Bug]: ,"### Website or app

localhost

### Repro steps

In react router's latest version.  Inside the loader or action function one is not able to use reduxjs functions like useselector,usedispatch

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-03-14 14:03:16,bug,Bug: Component is not a function when using Suspense and forwardRef,"React version: 18.3.0-next-3ba7add60-20221201

## Steps To Reproduce

I haven't been able to create a minimal example yet, if needed I will spend more time on it. However, it only seems to occur when Suspending components rerender in a specific order.

## Description

The `Component is not a function` error is thrown when using Suspense and forwardRef together in a specific way.

It seems like react-reconciler doesn't properly handle forwardRefs in either `renderWithHooksAgain`, `replaySuspendedComponentWithHooks`, `replayFunctionComponent` or `replaySuspendedUnitOfWork`. The `Component` variable is not a function in this case, but a `{ $$typeof: Symbol(react.forward_ref), render: (props, ref) => any }`. `renderWithHooksAgain` tries to execute `Component(props, secondArg)`, which throws this error.

I'm not too familiar with React internals, if you can tell me how to trigger this codepath I can make a minimal reproduction more easily.

<img width=""1303"" alt=""Screenshot 2023-03-14 at 14 55 13"" src=""https://user-images.githubusercontent.com/5406212/225024052-635c6639-8617-45a7-b6ce-c606d2ce3d90.png"">"
facebook/react,2023-02-24 04:32:07,bug,Bug: Nested useTransition makes isPending of outer one always false,"Nested `startTransition` call ""takes over"" and makes parent `startTransition` unable to track `isPending`.

Seb says it's a bug.

Repro:

https://codesandbox.io/s/pensive-breeze-rg70wn?file=/IndexPage.js:192-288

1. Click the button
2. `isPending` in `IndexPage.js` is `true`

However, `isPending` in `App.js` is `false`.

Expected: `isPending` in `App.js` is also `true`."
facebook/react,2023-02-16 13:31:28,bug,"[DevTools Bug] Cannot add node ""792"" because a node with that id is already in the Store.","### Website or app

https://chat.openai.com/chat

### Repro steps

log in to chatGPT

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.1-47f63dc54

### Error message (automated)

Cannot add node ""792"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
emit@moz-extension://ce8dcc20-3b2d-4cfe-b13e-34da2aa8e2c3/build/main.js:25895:22
bridge_Bridge/this._wallUnlisten<@moz-extension://ce8dcc20-3b2d-4cfe-b13e-34da2aa8e2c3/build/main.js:26064:14
listener@moz-extension://ce8dcc20-3b2d-4cfe-b13e-34da2aa8e2c3/build/main.js:56299:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-02-08 15:00:05,bug,Bug(@next): legacy `ReactDOM.render` crashes when rendering into `document` container,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.3.0-next-4bf2113a1-20230206

## Steps To Reproduce

1. `ReactDOM.render` into a `document` container

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-next-legacy-render-crashes-when-rendering-html-jqdut3?file=/src/index.js

## The current behavior

Throws with 

```
React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.
```

`ReactDOM.render` clears the container before rendering into it. But with the new HostSingletons (https://github.com/facebook/react/pull/25426) we expect an existing `documentElement`.

The odd part is that it seems like https://github.com/facebook/react/pull/25426 affected the `@next` release even though `enableHostSingletons` is disabled for that release.

/cc @gnoff

## The expected behavior

No crash like in `react-dom@18.2.0`: https://codesandbox.io/s/react-next-legacy-render-crashes-when-rendering-html-forked-977biy"
facebook/react,2023-02-02 08:53:46,bug,Bug: useSyncExternalStore will cause hydration missmatch in `StrictMode` if `serverSnapshot` is different from `snapshot`,"## React version
React version: 18.3.0-next-b0671f9ea-20230130

## Problem
In `StrictMode`,  when using hydrateRoot to render a component that using `useSyncExternalStore` it seems that useSES will do hydration twice. 

But in second hydration process,  useSES does not use the result of `getServerSnapshot` as initial state, which will cause hydration error.

This problem will only happen in `development` mode, 

## Reproduce
Link to code example:
https://codesandbox.io/s/useses-18-3-rojznv

It works well in react 18.2
https://codesandbox.io/s/useses-18-2-13iskc



"
facebook/react,2023-01-26 00:43:30,bug,"[DevTools Bug]: Can not work on devtools, instructions lead to error","### Website or app

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en

### Repro steps

Because react requires java, not on macos (but assumes brew installed!):
```
brew update && brew install java
sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
export PATH=""/usr/local/opt/openjdk/bin:$PATH""' >> ~/.zshrc
export PATH=""/usr/local/opt/openjdk/bin:$PATH"" >> ~/.zshrc
export PATH=""/usr/local/opt/openjdk/bin:$PATH""
```

Because react requires node before v17 (but assuming you have nvm installed!):
```
nvm install 16
```

then the real stuff (directions inside folders like ./chrome/ are quite wrong):
```
git clone https://github.com/facebook/react.git
cd react
yarn install
yarn build-for-devtools
cd packages/react-devtools-extensions
yarn build:chrome
yarn build:chrome:local
yarn run test:chrome
```

Now inside devtools:

```
Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: ""script-src 'self' 'wasm-unsafe-eval'"".

    at ./src/contentScripts/prepareInjection.js (prepareInjection.js:133:1)
    at __webpack_require__ (prepareInjection.js:20:30)
    at prepareInjection.js:84:18
    at prepareInjection.js:87:10
```

What exactly are you doing that works in order to build, test, and develop this extension?

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-01-25 07:31:53,bug," ERROR  TypeError: Cannot read property 'createElement' of undefined, js engine: hermes","### App

using flipper dor react devtools

### Repro steps

migrate to current version of  RN-0.71.1
using flipper 
enable hermes engine
run the app




### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

ERROR  TypeError: Cannot read property 'createElement' of undefined, js engine: hermes 

### Error call stack (automated)

```text
ERROR  TypeError: Cannot read property 'createElement' of undefined, js engine: hermes 

this is related to --->> path: node_modules/react-devtools-core/dist/backend.js
function initialize() {
  canvas = window.document.createElement('canvas');
  canvas.style.cssText = ""\\n    xx-background-color: red;\\n    xx-opacity: 0.5;\\n    bottom: 0;\\n    left: 0;\\n    pointer-events: none;\\n    position: fixed;\\n    right: 0;\\n    top: 0;\\n    z-index: 1000000000;\\n  "";
  var root = window.document.documentElement;
  root.insertBefore(canvas, root.firstChild);
}
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2023-01-11 16:52:42,bug,"[DevTools Bug] Cannot remove node ""0"" because no matching node was found in the Store.","### Website or app

app

### Repro steps

1.react-native run android 
2.react-devtools
3.adb reverse tcp:8097 tcp:8097
4.open dev tools on phone
5.Error

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.27.1-47f63dc54

### Error message (automated)

Cannot remove node ""0"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:48:336132
    at f.emit (C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:48:281406)
    at C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:48:282947
    at C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:48:673319
    at Array.forEach (<anonymous>)
    at A.e.onmessage (C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:48:673303)
    at A.t (C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:39:2836)
    at A.emit (events.js:315:20)
    at e.exports.L (C:\\Users\\gimpl\\AppData\\Roaming\\npm\\node_modules\\react-devtools\\node_modules\\react-devtools-core\\dist\\standalone.js:3:58894)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-16 16:09:56,bug,[DevTools Bug]: The extension brokes some JavaScripts - React is not used.,"### Website or app

https://codesandbox.io/s/condescending-solomon-465djc?file=/index.html

### Repro steps

With the code in the sandbox (but in a real page), when the extension is enabled, the tree is expanded, and cannot be collapsed anymore.

![image](https://user-images.githubusercontent.com/408368/208140548-61ae786b-b712-40eb-a64b-b4f814e6965b.png)

There are no errors in the console of the page, but many in the extension. I don't know if it's correlated. 


Note: This code is provided by Symfony, a popular PHP framework. So many developer faces this issue

Note 2: This issue is quite new

I also created an [issue in Symfony](https://github.com/symfony/symfony/issues/48545).

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-12-11 20:37:37,bug,"[DevTools Bug] Element ""1307"" not found","### Website or app

no source code available publically

### Repro steps

Working on my local react project

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.1-47f63dc54

### Error message (automated)

Element ""1307"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39543:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40918:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39222:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39756:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42414:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35065:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37690:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44490:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39222:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39394:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39424:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39394:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44671:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44100:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31925:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32569:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39819:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56024:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-09 00:22:26,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

Personal

### Repro steps

Go on a React App. Open panel. Observe Error

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.1-47f63dc54

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27865:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25895:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26064:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56299:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-06 00:35:54,bug,Bug: use() causes nested Suspense boundaries to not reveal ,"Nested Suspense boundaries should reveal as the content becomes ready. However, this doesn't seem to work with `use`.

Repro case: https://codesandbox.io/embed/festive-archimedes-sihgkb?file=/ArtistPage.js:338-346

Expected: Suspense boundaries reveal separately
Actual: it waits for everything before revealing anything"
facebook/react,2022-12-05 11:14:05,bug,"[DevTools Bug] Element ""51"" not found","### Website or app

local app

### Repro steps

working on the browser Presentation API
not really sure what i did to make this happen

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""51"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-05 07:33:55,bug,"[DevTools Bug] Element ""744"" not found","### Website or app

https://codesandbox.io/s/data-grid-community-forked-ff6d2j

### Repro steps

Occurred during Mui Datagrid setup

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""744"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-04 14:37:52,bug,"[DevTools Bug] Cannot remove node ""0"" because no matching node was found in the Store.","### Website or app

.

### Repro steps

[DevTools Bug] Cannot remove node ""0"" because no matching node was found in the Store.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.26.1-44e2ca393

### Error message (automated)

Cannot remove node ""0"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at /Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:335672
    at f.emit (/Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:281031)
    at /Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:282572
    at /Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:672375
    at Array.forEach (<anonymous>)
    at A.e.onmessage (/Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:672359)
    at A.t (/Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:39:2836)
    at A.emit (events.js:315:20)
    at e.exports.L (/Users/300073191/.nvm/versions/node/v14.17.1/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:3:58894)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-04 04:50:33,bug,"[DevTools Bug] Element ""12"" not found","### Website or app

Chrome

### Repro steps

Went to check react component dev tools for state values and got error

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""12"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-02 11:52:24,bug,"[DevTools Bug] Element ""3"" not found","### Website or app

https://github.com/BlakeMack/quiz-app-react

### Repro steps

-As soon as the < App/> component is rendered (as soon as the application is loaded) I get the Element 3 error above, which stays consistent throughout every state change in my application 
start
quizdata
score
isScored
But I am not getting any console errors and the app is working as expected, but I have no access to my react components or any visibility of the state changes occurring within the app 

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""3"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-01 18:35:20,bug,"[DevTools Bug] Element ""9"" not found | Also ""Element ""10"" not found"" / ""Element ""12"" not found""...","### Website or app

https://github.com/arbocobra/redux-minesweeper

### Repro steps

On first load I get multiple Error warnings on all app components from `<Game/>` down. They are identified with different Element numbers but appear to be directed to the same issue 
""The error was thrown at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15"" 

If you select 'Begin Game' in app the error in component` <Game />` can be dismissed but new Errors appear on all newly rendered components below (once again all have different Element numbers directed to the same location (../main.js:39558:15)

//

This is issue is probably related to [[DevTools Bug] Element ""41"" not found](https://github.com/facebook/react/issues/25755)

Chrome is up to date (Version 108.0.5359.71 (Official Build) (x86_64)), and restarted. 
I also tried reinstalling React extension (running 4.27.0).

The app is using Redux, which one commenter in other thread mentioned might be a commonality. 

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""9"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-01 05:41:21,bug,"[DevTools Bug] Element ""20"" not found","### Website or app

Website

### Repro steps

Added a useEffect to a functional component.

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""20"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-12-01 01:49:52,bug,"[DevTools Bug] Element ""41"" not found","### Website or app

https://github.com/Afrokk/litmus.tools

### Repro steps

In branch litmus.tools -> feature/LIT-5: 
I just run the app and it throws this error.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.27.0-bd2ad89a4

### Error message (automated)

Element ""41"" not found

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-11-02 15:46:40,bug,"[DevTools Bug] Cannot add node ""47"" because a node with that id is already in the Store.","### Website or app

private

### Repro steps

when we have multiple react application in the same page

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.25.0-336ac8ceb

### Error message (automated)

Cannot add node ""47"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
emit@moz-extension://36392081-5ec8-d94c-b8d5-869fc97bdf34/build/main.js:24626:22
bridge_Bridge/this._wallUnlisten<@moz-extension://36392081-5ec8-d94c-b8d5-869fc97bdf34/build/main.js:24795:14
listener@moz-extension://36392081-5ec8-d94c-b8d5-869fc97bdf34/build/main.js:54959:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-10-16 08:35:57,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

local personal app

### Repro steps

I was using Global context

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.25.0-336ac8ceb

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26596:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24626:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24795:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54959:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-09-11 10:20:47,bug,[DevTools Bug]: react-devtools standalone launching and quitting after 2 seconds with no errors on Ubuntu 22.04,"### Website or app

https://www.facebook.com

### Repro steps

Run `react-devtools` in the terminal.

An empty window appears for maybe 2 seconds and then disappears. The terminal doesn't show any messages whatsoever.

There is another issue here regarding react-devtools failing silently on Debian, where the submitter alleged that it was related to insufficient permissions to run electron. Not sure if that's related to this issue, but I can run electron just fine, it's just react-devtools that are failing.

OS is Ubuntu 22.04 (Kubuntu), Node is v16.16.0, react-devtools 4.25.0

(Updated to add URL)

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-09-06 20:59:52,bug,[DevTools Bug] Cannot read properties of undefined (reading 'isCollapsed'),"### Website or app

https://github.com/alissonally

### Repro steps

3

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.25.0-336ac8ceb

### Error message (automated)

Cannot read properties of undefined (reading 'isCollapsed')

### Error call stack (automated)

```text
at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27340:35)
    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27356:26)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37091:63
    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29207:18)
    at Uj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16359:76)
    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16350:10)
    at Gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19332:86)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18930:11)
    at El (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18922:23)
    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18906:5)
```


### Error component stack (automated)

```text
at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28902:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:4235:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36841:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33778:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36399:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43155:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37920:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38092:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38122:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38092:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43336:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42781:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30676:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31302:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38517:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54684:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot read properties of undefined (reading 'isCollapsed') in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-09-03 02:10:05,bug,Bug: useReducer bail-out w/ useEffect + Suspense causes infinite loop (StrictMode error with next/experimental builds),"I just found our lib doesn't pass tests with latest build (unreleased ones). https://github.com/pmndrs/jotai/issues/1370

React version: 18.3.0-next-3d443cad7-20220823

## Steps To Reproduce

```jsx
const Component = () => {
  const [count, dispatch] = useReducer((prev) => prev, 0);
  useEffect(() => {
    dispatch();
  }, []);
  return <>{count}</>;
};

const App = () => (
  <Suspense>
    <Component />
  </Suspense>
);
```

> Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.

Link to code example: https://codesandbox.io/s/focused-andras-p9qyxu?file=/src/App.js

## The current behavior

Warning in StrictMode.

## The expected behavior

No warning in StrictMode.

#25049 seems related. I'm not sure if it's a bug or a misusage."
facebook/react,2022-08-12 09:17:28,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

website

### Repro steps

Refresh page..

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.25.0-336ac8ceb

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26596:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24626:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24795:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54959:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-08-08 08:11:43,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

react developer tools

### Repro steps

Open Components in Web Developer Tools

### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.25.0-336ac8ceb

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
emit@moz-extension://6f15f1d5-602a-4a38-8422-c9e5075b7456/build/main.js:24626:22
bridge_Bridge/this._wallUnlisten<@moz-extension://6f15f1d5-602a-4a38-8422-c9e5075b7456/build/main.js:24795:14
listener@moz-extension://6f15f1d5-602a-4a38-8422-c9e5075b7456/build/main.js:54959:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-07-24 12:53:21,bug,"[DevTools Bug]: ""Hook parsing failed"" Components tab","### Website or app

https://studio-test-2.netlify.app/

### Repro steps

click ""Components"" tab
click on component
click ""parse hook names""


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

4.25.0

### Error message (automated)

""Hook parsing failed""

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-07-18 06:27:41,bug,"[DevTools Bug] Cannot remove node ""20025"" because no matching node was found in the Store.","### Website or app

https://dev.threemad.com

### Repro steps

On inspecting comment modal

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.25.0-336ac8ceb

### Error message (automated)

Cannot remove node ""20025"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26725:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24626:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24795:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54959:39)
```


### Error component stack (automated)

```text
comment
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-07-07 20:18:39,bug,"[DevTools Bug] Cannot remove node ""1390"" because no matching node was found in the Store.","### Website or app

https://github.com/OfficielSalah/marsamaroc

### Repro steps

1. create account
2. redirect to verify email page
3. copy otp from email
4. paste it in email page
5. redirect login
6. keep redirecting between login page and verify email page

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.7-7f673317f

### Error message (automated)

Cannot remove node ""1390"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26516:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24434:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24603:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54566:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-07-06 23:05:13,bug,Possible Suspense bug,"I think I've trapped a bug where– after React suspends and the data has resolved, React bails out before re-rendered some of the Suspended components. (It's possible the bug is in my Suspense cache logic. I realize I'm working with un-finalized APIs.)

Here is a Loom walk through of the code in question:
https://www.loom.com/share/e356cf5d261e49f4b9f724a123349db9

Here is a Replay recording of the bug with annotations from myself and @Andarist:
https://app.replay.io/recording/cffed6a1-297e-428c-83a6-3a86451d0128

To reproduce the bug directly:
1. Checkout Replay commit [`22a07dbb294e0381d371cb744ac1ea2031edf9d6`](https://github.com/replayio/devtools/commit/22a07dbb294e0381d371cb744ac1ea2031edf9d6)
1. In the main directory run `yarn install`
1. In `packages/bvaughn-architecture-demo` run `yarn dev`
1. Open localhost:3000/tests/object-inspector and scroll down until you see ""Loading..."" (below the entry containing ""htmlElementWithAttributes"")

cc @acdlite who seemed interested in looking into this sometime (obviously no hurry) 😄 "
facebook/react,2022-06-30 06:01:54,bug,"[DevTools Bug] Cannot remove node ""0"" because no matching node was found in the Store.","### Website or app

React Native App

### Repro steps

1. Run react native app
2. npx react-devtools
3. adb reverse tcp:8097 tcp:8097
4. reload the app, this error should come as mentioned below

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.24.7-7f673317f

### Error message (automated)

Cannot remove node ""0"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at /Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:333971
    at f.emit (/Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:279464)
    at /Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:281005
    at /Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:667650
    at Array.forEach (<anonymous>)
    at A.e.onmessage (/Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:667634)
    at A.t (/Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:39:2838)
    at A.emit (events.js:315:20)
    at e.exports.L (/Users/300037427/.npm/_npx/64332/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:3:58322)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-06-23 17:43:19,bug,[DevTools Bug]: Selecting/deselecting boolean from DevTools Component props causing loss of class functions,"### Website or app

https://github.com/a-gehlot/react-error

### Repro steps

1) Install webpack, react, babel with ""npm install"" in terminal. 

2) Bundle app with webpack via ""webpack --watch --mode=developement"" in terminal.

3) Open up ""index.html"" in Chrome and open React DevTools. Under Components, there should be a Dog component within a Person component, where the Person is passed as a prop to the Dog.

4) Under Dog props, there should be a person object with a value of present being true. If you click the button, the value of present should change to false, the number should switch to 0, and the checkbox should get deselected. However, if you manually select the checkbox to change between true/false, the prop seems to lose its prototype references to the original JS class, as an error stating it cannot find the function will be shown.

https://user-images.githubusercontent.com/52260394/175361370-b6ff5dea-788f-4564-a279-57e3cae11a4d.mov

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-06-07 23:04:48,bug,"[DevTools Bug] Cannot remove node ""1168"" because no matching node was found in the Store.","### Website or app

1

### Repro steps

1

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.7-7f673317f

### Error message (automated)

Cannot remove node ""1168"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26516:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24434:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24603:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54566:39)
```


### Error component stack (automated)

```text
1
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-05-26 22:56:27,bug,[DevTools Bug]: Component tree panel becomes unresponsive after clicking on a few components,"### Website or app

Multiple; but you can check at https://react-bootstrap.github.io/

### Repro steps

1. Access a website in Chrome that uses React.
2. Open Chrome Developer Tools
3. Open the React Developer Tools Components tab/panel
4. Click on 5 - 10 components in the component tree individually to inspect them

Notes: 

- This started happening on all React-based websites after updating to Chrome Version 102.0.5005.61 on my work MacBook (x86_64) and my personal MacBook (arm64). Reverting back to Chrome 100 seems to help.
- I had a co-worker test as well, with the same result.
- You can still select individual components using the picker, even after the panel locks up.
- The lock-up seems to happen quicker when `Expand component tree by default` is selected in the `Components` tab in the panel settings, but will still lock up if you manually expand enough components.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.6 (5/12/2022)

### Error message (automated)

None

### Error call stack (automated)

N/A

### Error component stack (automated)

N/A

### GitHub query string (automated)

N/A"
facebook/react,2022-05-23 20:29:50,bug,"[DevTools Bug]: ""Reload and profile"" aways disabled on Timeline tab","### Website or app

beta.reactjs.org (local development)

### Repro steps

1. https://github.com/reactjs/reactjs.org/tree/main/beta
2. `yarn dev`

""Reload and profile"" is enabled for Flamegraph:

<img width=""724"" alt=""Screenshot 2022-05-23 at 21 28 07"" src=""https://user-images.githubusercontent.com/810438/169900687-7c62d7c5-34ad-43c0-b1fa-ca45c8e16dba.png"">

But disabled for Timeline:

<img width=""671"" alt=""Screenshot 2022-05-23 at 21 28 12"" src=""https://user-images.githubusercontent.com/810438/169900693-ba60f1f4-3b37-4141-993a-70bac5647b01.png"">

And yet I can ""reload and profile"" in Flamegraph, then switch to Timeline and it works. So this doesn't add up.

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-05-14 15:57:43,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

[expo init](https://codesandbox.io/s/new)

### Repro steps

All you have to do is use 'expo init' or 'npx create-react-native-app' and make a fresh app with a blank template. When I open it with 'expo start' or 'npm start' I get this message every time in the debugger.

When I press the 'dismiss' button, I get a box that says:
'Unsupported DevTools backend version
You are running react-devtools version 4.14.0-d0ec283819.
This requires bridge protocol version 1. However the current backend version uses bridge protocol version 2.
To fix this, upgrade the DevTools NPM package: npm i -g react-devtools@^4.22.0'

I follow all the steps I can find to solve the issue (including yarn resolutions, updating node.js and packages, etc.) but nothing works at all.

I cannot initialize new apps without getting the error. I really want this debugger to work again.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.14.0-d0ec283819

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:140545
    at c.emit (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:89515)
    at G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:90986
    at G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:347787
    at Array.forEach (<anonymous>)
    at S.Gc.e.onmessage (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:347771)
    at S.n (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:40:3009)
    at S.emit (events.js:315:20)
    at e.exports.P (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:9318)
    at e.exports.emit (events.js:315:20)
    at e.exports.dataMessage (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:15409)
    at e.exports.getData (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:14651)
    at e.exports.startLoop (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:12066)
    at e.exports._write (G:\\Workspace\\rn-debugger-windows-x64\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:11421)
    at doWrite (_stream_writable.js:403:12)
    at writeOrBuffer (_stream_writable.js:387:5)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-05-12 16:28:24,bug,[DevTools Bug]: console.log() crashes the app,"### Website or app

Local development

### Repro steps

In order to reproduce it, type `console.log(*any variable or functionality)`
If using console log for printing string, it works with not errors

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-05-11 10:41:10,bug,"[DevTools Bug]: When inspecting with DevTools, it fails to select correct react component when there are multiple react-dom instances in the application","### Website or app

https://codesandbox.io/s/jtiw8m

### Repro steps

When using devtools in the linked codesandbox, I am not able to select react components that are rendered by the micro-fe using the inspect tool.

Steps to reproduce:
1. Go to https://jtiw8m.csb.app/ 
2. Open React DevTools and click on Inspect icon with the ""Select an element on the page to inspect it""  tooltip
3. Inspect the component with the pink background and text ""micro-fe example heading""
4. Devtools selects `App` as the component (or if the component type filter is disabled, it selects the `div` where the micro-fe is mounted)

Ideally it would actually select either the `MicroFeRoot` component (or the corresponding html node if the filter is disabled).

I was able to get it working by doing [the following change](https://github.com/facebook/react/compare/main...danielkutt:devtools-microfe-bug) in the `react-devtools-backend/src/backend/agent.js`



### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-05-07 00:26:58,bug,[DevTools Bug]: I believe that UI and UX from React DevTools is a big bug,"### Website or app

https://all.apllications.com

### Repro steps

Hello, community! ✌

I have an big question about the React DevTools, why is so different in comparasion with Vue DevTools ? all is more hard...

See the context, indentify the state's, the components.... 😒

In comparasion with Vue DevTools, the React DevToosl don't have a pretty and functional UI and UX. The context's, state's and components don't have a UI ogarnized  to easy indentification. On Vue DevTools there tabs to components, store (context's), events and some other features, see below:

![image](https://user-images.githubusercontent.com/92554215/167229861-13410a8e-74dd-4d6a-9b65-772e1beedbd0.png)

The vuex (context's in React environment)

![image](https://user-images.githubusercontent.com/92554215/167230399-5c5e7cfd-6431-4205-bec8-97a09191e84c.png)

Timeline of events 😍👍👍

![image](https://user-images.githubusercontent.com/92554215/167230442-44e2bbdf-00f6-42f8-aaa8-872c83fab05b.png)



### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-04-26 14:07:21,bug,"[DevTools Bug]: TreeContext error: Can't access property ""id"" in undefined","### Website or app

https://app.replay.io/

### Repro steps

Unfortunately I don't know how to reproduce this bug. It was just logged to Sentry.

It seems like there's a logic bug here though:
https://github.com/facebook/react/blob/bd4784c8f8c6b17cf45c712db8ed8ed19a622b26/packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js#L386-L416

If `selectedElementIndex` is null or `elementIndicesWithErrorsOrWarnings` is empty, then `flatIndex` would be 0 still– and this statement would result in an undefined entry:
```js
prevEntry =
  elementIndicesWithErrorsOrWarnings[
    elementIndicesWithErrorsOrWarnings.length - 1
  ];
```

### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-inline

### DevTools version (automated)

4.24.4

### Error message (automated)

Error: can't access property ""id"", n is undefined

### Error call stack (automated)

```text
React ErrorBoundary Error: can't access property ""id"", n is undefined
  at TreeContextController(./node_modules/react-devtools-inline/dist/frontend.js:20793:10)
  at SettingsContextController(./node_modules/react-devtools-inline/dist/frontend.js:21419:10)
  at ModalDialogContextController(./node_modules/react-devtools-inline/dist/frontend.js:28526:10)
  at DevTools_DevTools(./node_modules/react-devtools-inline/dist/frontend.js:44535:10)
  at useMemo(./src/ui/components/SecondaryToolbox/ReactDevTools.tsx:269:1)
  at ConnectFunction(./node_modules/react-redux/es/components/connectAdvanced.js:220:22)
  at Redacted(./src/ui/components/Redacted.tsx:5:83)
  at SecondaryToolbox(./src/ui/components/SecondaryToolbox/index.tsx:119:25)
  at useGetShowVideo(./src/devtools/client/shared/components/splitter/SplitBox.tsx:25:37)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-04-23 16:38:15,bug,"[DevTools Bug]: forwardRef components not marked as ""rendered"" if context changed","### Website or app

https://codesandbox.io/s/forwardref-context-change-did-not-render-lpdk4t?file=/src/index.js

### Repro steps

1. Goto https://lpdk4t.csb.app/
1. Start profiling
3. Enter ""a"" into the input
4. Stop profiling
![forwardRef-did-not-render](https://user-images.githubusercontent.com/12292047/164915101-f28f305a-2c51-4b89-8515-da073e5551c9.png)



### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

4.24.3-46a98cff2

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-04-21 14:05:31,bug,[DevTools Bug]: Error in event handler: Error: Attempting to use a disconnected port object,"### Website or app

https://codesandbox.io/s/blissful-raman-2on7k2

### Repro steps

1. Create a react app 
```
yarn create react-app test-react
cd test-react
yarn start
```
2. Create `.env.development` file in root.
```
HTTPS=true
PORT=4100
BROWSER=none
```
3. Visit https://localhost:4100/ in Chrome v100.0.4896.127
4. Open React Devtools by inspecting page, some times it shows `Components` tab but in large application it does not show the `Components` tab. If it shows the tab the error message is sent to dev tools every second.
5. See error message in [chrome://extensions/](chrome://extensions/)
6. This is not reproducible in Firefox v99.0.1.

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

`4.24.3 (3/30/2022)`

### Error message (automated)

`Error in event handler: Error: Attempting to use a disconnected port object`

### Error call stack (automated)
`build/background.js:139 (lOne)`

```
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = ""/build/"";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 115);
/******/ })
/************************************************************************/
/******/ ({

/***/ 115:
/***/ (function(module, exports, __webpack_require__) {

""use strict"";
/* global chrome */


const ports = {};
const IS_FIREFOX = navigator.userAgent.indexOf('Firefox') >= 0;
chrome.runtime.onConnect.addListener(function (port) {
  let tab = null;
  let name = null;

  if (isNumeric(port.name)) {
    tab = port.name;
    name = 'devtools';
    installContentScript(+port.name);
  } else {
    tab = port.sender.tab.id;
    name = 'content-script';
  }

  if (!ports[tab]) {
    ports[tab] = {
      devtools: null,
      'content-script': null
    };
  }

  ports[tab][name] = port;

  if (ports[tab].devtools && ports[tab]['content-script']) {
    doublePipe(ports[tab].devtools, ports[tab]['content-script']);
  }
});

function isNumeric(str) {
  return +str + '' === str;
}

function installContentScript(tabId) {
  chrome.tabs.executeScript(tabId, {
    file: '/build/contentScript.js'
  }, function () {});
}

function doublePipe(one, two) {
  one.onMessage.addListener(lOne);

  function lOne(message) {
    two.postMessage(message);
  }

  two.onMessage.addListener(lTwo);

  function lTwo(message) {
    one.postMessage(message);
  }

  function shutdown() {
    one.onMessage.removeListener(lOne);
    two.onMessage.removeListener(lTwo);
    one.disconnect();
    two.disconnect();
  }

  one.onDisconnect.addListener(shutdown);
  two.onDisconnect.addListener(shutdown);
}

function setIconAndPopup(reactBuildType, tabId) {
  chrome.browserAction.setIcon({
    tabId: tabId,
    path: {
      '16': 'icons/16-' + reactBuildType + '.png',
      '32': 'icons/32-' + reactBuildType + '.png',
      '48': 'icons/48-' + reactBuildType + '.png',
      '128': 'icons/128-' + reactBuildType + '.png'
    }
  });
  chrome.browserAction.setPopup({
    tabId: tabId,
    popup: 'popups/' + reactBuildType + '.html'
  });
}

function isRestrictedBrowserPage(url) {
  return !url || new URL(url).protocol === 'chrome:';
}

function checkAndHandleRestrictedPageIfSo(tab) {
  if (tab && isRestrictedBrowserPage(tab.url)) {
    setIconAndPopup('restricted', tab.id);
  }
} // update popup page of any existing open tabs, if they are restricted browser pages.
// we can't update for any other types (prod,dev,outdated etc)
// as the content script needs to be injected at document_start itself for those kinds of detection
// TODO: Show a different popup page(to reload current page probably) for old tabs, opened before the extension is installed


if (!IS_FIREFOX) {
  chrome.tabs.query({}, tabs => tabs.forEach(checkAndHandleRestrictedPageIfSo));
  chrome.tabs.onCreated.addListener((tabId, changeInfo, tab) => checkAndHandleRestrictedPageIfSo(tab));
} // Listen to URL changes on the active tab and update the DevTools icon.


chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  if (IS_FIREFOX) {
    // We don't properly detect protected URLs in Firefox at the moment.
    // However we can reset the DevTools icon to its loading state when the URL changes.
    // It will be updated to the correct icon by the onMessage callback below.
    if (tab.active && changeInfo.status === 'loading') {
      setIconAndPopup('disabled', tabId);
    }
  } else {
    // Don't reset the icon to the loading state for Chrome or Edge.
    // The onUpdated callback fires more frequently for these browsers,
    // often after onMessage has been called.
    checkAndHandleRestrictedPageIfSo(tab);
  }
});
chrome.runtime.onMessage.addListener((request, sender) => {
  var _request$payload, _ports$id;

  const tab = sender.tab;

  if (tab) {
    const id = tab.id; // This is sent from the hook content script.
    // It tells us a renderer has attached.

    if (request.hasDetectedReact) {
      // We use browserAction instead of pageAction because this lets us
      // display a custom default popup when React is *not* detected.
      // It is specified in the manifest.
      setIconAndPopup(request.reactBuildType, id);
    } else {
      switch ((_request$payload = request.payload) === null || _request$payload === void 0 ? void 0 : _request$payload.type) {
        case 'fetch-file-with-cache-complete':
        case 'fetch-file-with-cache-error':
          // Forward the result of fetch-in-page requests back to the extension.
          const devtools = (_ports$id = ports[id]) === null || _ports$id === void 0 ? void 0 : _ports$id.devtools;

          if (devtools) {
            devtools.postMessage(request);
          }

          break;
      }
    }
  }
});

/***/ })

/******/ });
```

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-04-13 19:42:01,bug,"[DevTools Bug] Cannot add child ""foo"" to parent ""bar"" because parent node was not found in the Store.","### Website or app

https://github.com/abybaddi009/react-bug-report

### Repro steps

Steps to reproduce:

1. Install all dependencies
2. Run the project with `npm start`
3. Navigate to http://localhost:3000/login
4. Enter any number into _phone number_ and click on **GET OTP**.
5. Enter any number into the text boxes and click on **SIGN IN**.
6. Allow access to location.
7. Check the Dev Tools for the error


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.3-46a98cff2

### Error message (automated)

Cannot add child ""986"" to parent ""985"" because parent node was not found in the Store.

### Error call stack (automated)

```text
emit@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:24430:22
bridge_Bridge/this._wallUnlisten<@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:24599:14
listener@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:54423:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add child  to parent  because parent node was not found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-04-07 20:49:39,bug,Console dimming on second StrictMode render forces string cast,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.0.0 (congrats on the release ☺️)

## Steps To Reproduce

1. During rendering of a component, log something that doesn't naturally cast to a string (e.g., `console.log(new Set())`).
2. Wrap the tree in `StrictMode`.
3. Observe the console.

Link to code example: https://codesandbox.io/s/magical-roman-wyeud7?file=/src/App.js

Note that the console dimming isn't applied to the inline CodeSandbox dev tools, so to see the issue, you need to visit the ""fullscreen view"" here: https://wyeud7.csb.app

## The current behavior

In Chrome:

<img width=""479"" alt=""Screen Shot 2022-04-07 at 4 19 09 PM"" src=""https://user-images.githubusercontent.com/1158733/162289676-bb6ba95f-4f85-4ce3-a179-10dfed3d5ad1.png"">

As expected, there are two console logs, one dimmed. Unfortunately, the way that the dimming works forces the second log to be serialized to a string. This has two issues:
1. It can result in two of the ""same"" logs looking very ""different"" from each other, which is confusing to developers. For example, in the screenshot above, it's pretty surprising that those two console lines occur from the same `console.log` call.
2. It prevents browser dev tools introspection. This can make it inconvenient or impossible to compare the two values if the string cast doesn't include the value, as in the screenshot above. This is problematic because a key use case of printing both values is to check whether they're the same.

You can kind of work around the second issue by writing your own string cast at the log callsite, but you lose the DX of introspection, which is pretty unfortunate especially in the case of large/deeply-nested objects, etc. Easier to compare two native console values than two `JSON.stringify` dumps.

## The expected behavior

While there is a new (appreciated!) dev tools option to suppress logging for the second render entirely, there is no way to disable the dimming feature.

Any of the following options would solve the issue:
1. Provide a dev tools option to disable dimming.
2. Remove the dimming feature entirely. (So that both logs are always printed the same way.)
3. Update the dimming implementation so that it doesn't force a string cast. (Guessing this isn't possible.)
4. Improve serialization of complex values. (IMO this isn't a great option because it doesn't solve the issue of consistency/confusion, but it would be better than the current behavior if all other options are ruled out.)

Thanks for considering."
facebook/react,2022-04-05 13:03:48,bug,Bug: [eslint-plugin-exhaustive-deps] hook wrongly marked as conditional (at exact number of conditionals in FC),"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

When using an exact number of conditionals before and after a react hook, the `React Hook ""hook_name"" is called conditionally. React Hooks must be called in the exact same order in every component render` rule is wrongly flagged as being violated. This is a really weird bug and it's kind of hard to explain. Just take a look at the code and watch as ESLint flags the hook as somehow being conditional. While this may seem like a huge edge case, this actually triggered in our code base and caused all hooks in the component to be flagged as conditional.

React version: 18.0.0 (doesn't seem to matter)

## Steps To Reproduce

1. Check out [this project](https://github.com/SanderRonde/eslint-hook-bug), run `yarn` and run `yarn eslint app/foo.tsx`.
2. Watch as the hook is incorrectly flagged as conditional.
3. Removing **or adding** one of the conditionals in the return statement makes the bug go away. The same goes for removing one of the conditionals above the hook.

Link to code example: https://github.com/SanderRonde/eslint-hook-bug
Unfortunately I couldn't get it to work online (because of a lack of terminals)

## The current behavior
Hook is incorrectly flagged as conditional

![image](https://user-images.githubusercontent.com/5385012/161759839-c3ba7be0-d708-4eb3-975a-bcd08317bd45.png)


## The expected behavior
Hook should not be conditional
"
facebook/react,2022-04-03 15:14:27,bug,Bug: [eslint-plugin-exhaustive-deps] can't find unstable value.,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.0.0 (not important)

## Steps To Reproduce
I'll show as a code.
<img width=""593"" alt=""스크린샷 2022-04-04 오전 12 01 05"" src=""https://user-images.githubusercontent.com/65149763/161434194-868b7fbb-9571-40d8-a4e3-2b261506d9ac.png"">

Link to code example:
https://codesandbox.io/s/stupefied-raman-g6j3fi?file=/src/App.js
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
exhaustive-deps can't found unstable dependency.

## The expected behavior
Warn lint message.

## Opinion
I know this code is super weird but This code may be improved. something like
- Add more core lint rule like 'useState is always declared as a const'
- eslint-plugin-exhaustive-deps should find reallocation value. and calculate real value.
- Or just stay it.

I just wonder what is your opinion. thank you."
facebook/react,2022-03-30 17:31:05,bug,React DOM UMD always warns in React 18,"This is a false positive.

<img width=""952"" alt=""Screenshot 2022-03-30 at 18 25 00"" src=""https://user-images.githubusercontent.com/810438/160895998-70db1fa4-e4f2-4289-9688-1822b6fb7dc6.png"">
"
facebook/react,2022-03-29 23:03:55,bug,Bug: No warning on infinite useEffect loop in React 18,"https://codesandbox.io/s/elastic-mayer-rzz4h2?file=/package.json

This is supposed to `console.error` but it doesn't.

17 warns: https://codesandbox.io/s/admiring-minsky-sze07m?file=/src/App.js"
facebook/react,2022-03-25 13:05:28,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

http://bestellen-a.cito.nl

### Repro steps

Just opening the console and going to Components or Profiler shows this error.

I noticed that in the console there are two warnings for contentScript.js (I am assuming this file is part of this extension):
﻿
contentScript.js:113 [Violation] 'message' handler took 210ms
contentScript.js:113 [Violation] 'message' handler took 891ms

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.0-82762bea5

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26326:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24400:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24566:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54300:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-03-20 08:18:43,bug,[DevTools Bug]: Error occurs when installing react-devtools in yarn berry project,"### Website or app

https://github.com/facebook/react

### Repro steps

I tried to install react-devtools with yarn berry, so i encountered this error log.

 yarn add react-devtools -D
➤ YN0000: ┌ Resolution step
➤ YN0002: │ @react-native-aria/combobox@npm:0.2.4-alpha.1 [d995e] doesn't provide react-dom (pd70ba), requested by @react-aria/overlays
➤ YN0002: │ @react-native-aria/combobox@npm:0.2.4-alpha.1 [d995e] doesn't provide react-dom (pa0a11), requested by @react-aria/live-announcer
➤ YN0002: │ @react-native-aria/combobox@npm:0.2.4-alpha.1 [d995e] doesn't provide react-dom (pd5c9c), requested by @react-aria/combobox
➤ YN0002: │ babel-preset-expo@npm:9.0.2 doesn't provide @babel/core (pff6e6), requested by @babel/plugin-proposal-decorators
➤ YN0002: │ babel-preset-expo@npm:9.0.2 doesn't provide @babel/core (p4f633), requested by @babel/plugin-transform-react-jsx
➤ YN0002: │ babel-preset-expo@npm:9.0.2 doesn't provide @babel/core (pa1fad), requested by @babel/preset-env
➤ YN0002: │ devfeed@workspace:. doesn't provide @types/react (p5404d), requested by native-base
➤ YN0002: │ devfeed@workspace:. doesn't provide react-dom (pf66e9), requested by native-base
➤ YN0002: │ devfeed@workspace:. doesn't provide react-dom (pfc556), requested by react-use
➤ YN0060: │ devfeed@workspace:. provides react-native-safe-area-context (p3bb21) with version 4.2.1, which doesn't satisfy what native-base requests
➤ YN0060: │ devfeed@workspace:. provides react-native-svg (pc0baf) with version 12.3.0, which doesn't satisfy what native-base requests
➤ YN0002: │ react-native-codegen@npm:0.0.8 doesn't provide @babel/preset-env (p1529d), requested by jscodeshift
➤ YN0000: │ Some peer dependencies are incorrectly met; run yarn explain peer-requirements <hash> for details, where <hash> is the six-letter p-prefixed code
➤ YN0000: └ Completed
➤ YN0000: ┌ Fetch step
➤ YN0000: └ Completed in 0s 393ms
➤ YN0000: ┌ Link step
➤ YN0001: │ Error: While cloning /Users/jihoon.lim/dev/devfeed/node_modules/string_decoder/node_modules/safe-buffer -> /Users/jihoon.lim/dev/devfeed/node_modules/registry-auth-token/node_modules/safe-buffer ENOENT: no such file or directory, scandir '/Users/jihoon.lim/dev/devfeed/node_modules/string_decoder/node_modules/safe-buffer'
➤ YN0000: └ Completed in 3s 361ms
➤ YN0000: Failed with errors in 3s 927ms

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-03-13 23:31:26,bug,React Devtools won't connect to Application running on iOS Simulator,"React Devtools doesn't connect to the instance running in the iOS Simulator.

React DevTools Screenshot

![image](https://user-images.githubusercontent.com/542948/158083928-0be956e7-6357-4308-8990-55cd3d0a8565.png)

iOS Simulator Screenshot

![image](https://user-images.githubusercontent.com/542948/158083953-c61f5079-78a9-4424-bae9-c7dfbd633404.png)

React Native appears to have some interactivity as you can see ""DevTools initialized"" and the inspector on the iOS Simulator is running in the condensed mode.

OS: macOS Monterey (12.2.1)
Chip: Apple M1 Pro"
facebook/react,2022-02-26 13:41:36,bug,[DevTools Bug] Cannot read properties of undefined (reading 'split'),"### Website or app

https://next-rsc-notes.vercel.app/

### Repro steps

1. enter the site
2. open react-devtools
3. select We(maybe suspense's child component)
4. and show following errors.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.23.0-e28a0db22

### Error message (automated)

Cannot read properties of undefined (reading 'split')

### Error call stack (automated)

```text
at getDerivedStateFromError (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37414:114)
    at ErrorBoundary_ErrorBoundary.c.payload (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16143:14)
    at Gg (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14571:47)
    at Dj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16788:5)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19204:86)
    at il (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18756:11)
    at hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18748:23)
    at Wk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18732:5)
    at al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18393:37)
    at Uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18314:51)
```


### Error component stack (automated)

```text
at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37375:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37864:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40513:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33354:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35975:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42520:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37375:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37518:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37548:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37518:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42700:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42146:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30256:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30878:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37927:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53807:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot read properties of undefined (reading 'split') in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-02-16 04:09:44,bug,"[DevTools Bug] Unsupported Bridge operation ""0""","### Website or app

local app development

### Repro steps

just install react devtools and downgrade to 4.11.0 

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.23.0-e28a0db22

### Error message (automated)

Unsupported Bridge operation ""0""

### Error call stack (automated)

```text
at /Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:53:333837
    at c.emit (/Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:53:277732)
    at /Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:53:279273
    at /Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:53:659742
    at Array.forEach (<anonymous>)
    at A.e.onmessage (/Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:53:659726)
    at A.t (/Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:44:3009)
    at A.emit (events.js:315:20)
    at e.exports.L (/Users/softwaremac/Desktop/Users/JigneshJani/RNProjects/WifiSwitch/WifiSwitchV2_29_5/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:8:13567)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Unsupported Bridge operation  in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-02-13 08:52:26,bug,[DevTools Bug]: DevTools failed to load source map,"### Website or app

Inital React App -> npm create-react-app

### Repro steps

1. Created initial react app
2. Typed ""npm start"" inside app folder
3. Check console of Chrome browser

This is what I get on my console in Chrome ""Version 98.0.4758.82 (Official Build) (64-bit)"":
![image](https://user-images.githubusercontent.com/17859431/153745907-5822f5f2-4bb4-43d7-b03b-d42edd5d64a7.png)

As these messages are annoying, please let me know how to fix this?

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

4.23.0

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-02-09 05:24:38,bug,"[DevTools Bug] Unsupported Bridge operation ""0""","### Website or app

none

### Repro steps

gaolinxiong

### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.23.0-e28a0db22

### Error message (automated)

Unsupported Bridge operation ""0""

### Error call stack (automated)

```text
at /usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:53:333837
    at c.emit (/usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:53:277732)
    at /usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:53:279273
    at /usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:53:659742
    at Array.forEach (<anonymous>)
    at A.e.onmessage (/usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:53:659726)
    at A.t (/usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:44:3009)
    at A.emit (events.js:315:20)
    at e.exports.L (/usr/local/lib/node_modules/react-devtools/node_modules/_react-devtools-core@4.23.0@react-devtools-core/dist/standalone.js:8:13567)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

```text
123
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Unsupported Bridge operation  in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2022-01-21 15:54:01,bug,DevTools should not crawl unmounted subtrees when profiling starts,"Previously we crawled all subtrees, even not-yet-mounted ones, to initialize context values. This was not only unecessary, but it also caused an error to be thrown. This commit adds a test and fixes that behavior.

Resolves #22970

### Test (before)

![Screen Shot 2022-01-21 at 10 51 54 AM](https://user-images.githubusercontent.com/29597/150558047-142daef9-8566-497e-be1f-0d1fdd38ced9.png)

### Test (after)

![Screen Shot 2022-01-21 at 10 52 03 AM](https://user-images.githubusercontent.com/29597/150558049-e6dc7ecc-d7d6-4723-b0a9-ea8f73bbae64.png)

"
facebook/react,2022-01-18 20:59:20,bug,[DevTools Bug]: Chrome Dev Tools extension shows websites built with other framework as React web sites,"### Website or app

https://angular.io/start

### Repro steps

1. Go to https://angular.io/start or https://vuejs.org/
2. Click on React Dev Tools extension
3. You should see message **This page is using the production build of React. ✅**


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-01-15 21:52:53,bug,[DevTools Bug]: Highlight updates when components render.,"### Website or app

nothing

### Repro steps

create a component list memoized (React.memo), and if you only modify 1 of them, this will mark that all are rendered, but if they are memoized the report says ""not re-renders"" detected

![Screenshot from 2022-01-15 21-51-08](https://user-images.githubusercontent.com/86263126/149638836-1d12c2e2-ea81-42fd-9aef-4fd43ba1424d.png)

if you see near to `typography` all those children are memoized and they arent re-rendering (expected) but devtools still highliting them if u see those `yellow boxes`

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-01-14 05:36:41,bug,[DevTools Bug]: 'This page is using the react build message' in every site,"### Website or app

youtube.com, github.com, gmail.com, lucidchart.app

### Repro steps

1. Open any web app not made with React (e.g.: youtube.com, amazon.com, github.com, gmail.com, lucidchart.app)
2.  The react icon is ON and the popover message says:
 'This page is using the production build of React. ✅'


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2022-01-10 17:54:13,bug,React 18: Context providers are reset to initial value in SSR during rendering,"<!--
  Ask a question or share feedback about the React 18 release here.
-->

While testing SSR streaming in latest React 18 experimental and alpha versions, [we noticed](https://github.com/Shopify/hydrogen/issues/415) that context providers are reset to their initial values during rendering under certain conditions.
It works well when handling 1 request at a time. However, when the server gets 2 or more requests at the same time, the context providers seem to get confused. The context is correct at the beginning of the rendering for each request but it gets lost after a while.

There's a reproduction here using @gaearon 's demo: https://codesandbox.io/s/keen-snowflake-8nyo8?file=/src/data.js:1035-1082

To my understanding, since the React tree is wrapped in a provider in SSR, `useContext` should never return `null` in the server. Have a look at the terminal and see how it actually logs `null` sometimes when getting multiple requests.


```
[0] This should never be null: { read: [Function: read] }
[0] This should never be null: { read: [Function: read] }
[0] This should never be null: null
[0] This should never be null: null
```

Run the following code from the console to simulate multiple requests:

```js
function doRequest() { return fetch('https://8nyo8.sse.codesandbox.io/', {headers: {accept:'text/html'}}).then(r => r.text()) }
await Promise.all([doRequest(), doRequest()])
```

We saw this same issue in different setups, using both Webpack and Vite.

Thanks!
"
facebook/react,2021-12-30 21:12:29,bug,"[DevTools Bug]: Error: Could not find ID for Fiber ""...""","### Website or app

https://github.com/d-pollard/react-konva-devtools-issue

### Repro steps

1. Install repo
2. run repo
3. visit `/playground` in your browser of choice. 
4. Navigate to the dev tools, and you should see the error

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-12-25 22:22:58,bug,[DevTools Bug] Cannot read properties of undefined (reading 'push'),"### Website or app

https://nickretallack.github.io/nameless-language/

### Repro steps

Just view the components tab.

This site is written in Rescript.

Actually, this is all the Rescript code you need to break devtools:

```rescript
@react.component
let make = () => {
  let _ = ReactUpdate.useReducer((_: unit, _: unit) => ReactUpdate.NoUpdate, ())
  React.useEffect(() => None)
  <div />
}
```

`ReactUpdate` is provided by [`rescript-react-update`](https://github.com/bloodyowl/rescript-react-update)


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.22.0-0229baee2

### Error message (automated)

Cannot read properties of undefined (reading 'push')

### Error call stack (automated)

```text
at F (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13216:7)
    at H (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13250:10)
    at exports.inspectHooksOfFiber (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13310:12)
    at inspectElementRaw (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8067:65)
    at Object.inspectElement (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8350:38)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:10183:56
    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4225:18)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4868:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:12176:9)
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38950:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37307:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37796:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40436:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33294:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35907:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42439:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37307:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37450:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37480:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37450:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42619:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42065:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30204:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30826:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37859:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53732:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot read properties of undefined (reading 'push') in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-12-18 07:08:12,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

app

### Repro steps

1. run npm start for native.
2. run android for native.
3. run react native debugger

and thats how happened.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.14.0-d0ec283819

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at /usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:140545
    at c.emit (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:89515)
    at /usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:90986
    at /usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347787
    at Array.forEach (<anonymous>)
    at S.Gc.e.onmessage (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347771)
    at S.n (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:3009)
    at S.emit (events.js:315:20)
    at e.exports.P (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:9318)
    at e.exports.emit (events.js:315:20)
    at e.exports.dataMessage (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:15409)
    at e.exports.getData (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:14651)
    at e.exports.startLoop (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:12066)
    at e.exports._write (/usr/lib/react-native-debugger/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:11421)
    at doWrite (_stream_writable.js:403:12)
    at writeOrBuffer (_stream_writable.js:387:5)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-12-15 22:22:47,bug,Bug: ,"Using `react-dom@^18.0.0-rc.0` inside a nextjs project(`next@12.0.7`), then opening a [antd](https://ant.design/) dropdown, will cause page to be deadly frozen. After downgraded react to `17.0.2`, the issue disappears.

My wild guess: this issue caused by some conflict btw dom manipulation and animation.

I'm happy to show detailed stuff if the React team needs. 

React version:
18.0.0-rc.0
"
facebook/react,2021-12-15 06:16:59,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

https://github.com/TheRitual/ByHeart

### Repro steps

Accualy this bug appears only on React Native debugger. The web version of debugger doesn't show any errors. The project is new and i just installed packages
```
$ expo install react-navigation
$ expo install react-navigation-stack
$ expo install expo-app-loading
$ expo install react-native-screens
$ expo install react-native-safe-area-context
```

so my dependencies are:

```json
""dependencies"": {
    ""expo"": ""~43.0.2"",
    ""expo-status-bar"": ""~1.1.0"",
    ""react"": ""17.0.1"",
    ""react-dom"": ""17.0.1"",
    ""react-native"": ""0.64.3"",
    ""react-native-web"": ""0.17.1"",
    ""react-navigation"": ""^4.4.4"",
    ""react-navigation-stack"": ""^2.10.4"",
    ""expo-app-loading"": ""~1.2.1"",
    ""react-native-screens"": ""~3.8.0"",
    ""react-native-safe-area-context"": ""3.3.2""
  },
```

I checked and now this bug appears in every new expo init even if it is just blank project. Old projects work fine.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.14.0-d0ec283819

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:140545
    at c.emit (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:89515)
    at C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:90986
    at C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:347787
    at Array.forEach (<anonymous>)
    at S.Gc.e.onmessage (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:48:347771)
    at S.n (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:40:3009)
    at S.emit (events.js:315:20)
    at e.exports.P (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:9318)
    at e.exports.emit (events.js:315:20)
    at e.exports.dataMessage (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:15409)
    at e.exports.getData (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:14651)
    at e.exports.startLoop (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:12066)
    at e.exports._write (C:\\Users\\Ritual\\AppData\\Local\\react_native_debugger\\app-0.12.1\\resources\\app.asar\\node_modules\\react-devtools-core\\dist\\standalone.js:8:11421)
    at doWrite (_stream_writable.js:403:12)
    at writeOrBuffer (_stream_writable.js:387:5)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-12-15 03:33:08,bug,react-devtools report Error: Cannot find module './app',"react-devtools version: 4.22.0
npm -g install react-devtools
react-devtools

```
internal/modules/cjs/loader.js:905
  throw err;
  ^

Error: Cannot find module './app'
Require stack:
- /Users/foo/.nvm/versions/node/v14.18.1/lib/node_modules/react-devtools/bin.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15)
    at Function.resolve (internal/modules/cjs/helpers.js:99:19)
    at Object.<anonymous> (/Users/foo/.nvm/versions/node/v14.18.1/lib/node_modules/react-devtools/bin.js:32:46)
    at Module._compile (internal/modules/cjs/loader.js:1085:14)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10)
    at Module.load (internal/modules/cjs/loader.js:950:32)
    at Function.Module._load (internal/modules/cjs/loader.js:790:12)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:76:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/Users/foo/.nvm/versions/node/v14.18.1/lib/node_modules/react-devtools/bin.js'
  ]
}
```"
facebook/react,2021-12-12 22:54:31,bug,"[DevTools Bug]: Fetch API cannot load webpack-internal:///... URL scheme ""webpack-internal"" is not supported","### Website or app

https://prnt.sc/22rtnf0

### Repro steps

Most actions in DevTools (search for component, click on component, hook parsing, profile record, etc) cause this error.

I am using Next.JS 12 within a NX monorepo.

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-12-03 22:06:42,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

https://pasteboard.co/6Ec3lSzDE4Yz.png

### Repro steps

1. Open Chrome with 50+ tabs.
2. Run React-based website locally.
3. Open Chrome Dev Tools to investigate [ActiveLink component](https://pasteboard.co/6Ec3lSzDE4Yz.png) hierarchy inside [Navbar component](https://pasteboard.co/ab8kgmDNgn1I.png). 
4. ActiveLink component from [Next](https://github.com/vercel/next.js/tree/canary/examples/active-class-name) was used.
5. Get uncaught error [Screenshot](https://pasteboard.co/3ugPX34TF2Xr.png)

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.21.0-2f8f60ca8

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26134:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24349:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24509:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53230:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-11-22 22:10:53,bug,Bug: Error checking code is skipped for async useEffect argument,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
React no longer complains when the function passed to `useEffect` returns a Promise (either directly or by being labeled `async`). I'm not in the habit of doing this, so it was only when I watched someone else make the function `async` and there were no errors that I realized that something had changed since 6.13.1 (the newest version I could find that still complained).

I can see the functionality is still present in `commitHookEffectListMount` in react-dom.development.js, but when I trace through it, the `effect.tag` is set to a different value and the test is skipped.

I realize that we now have an ESLint rule that provides the same message, but the lack of warning caused confusion about whether asynchronous functions were now allowed. 




React version: 17.0.2 

## Steps To Reproduce

1. Write a `useEffect` that has an `async` function
2. Open the console and observe that it doesn't complain

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/winter-wind-l33bi

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The code runs with no complaints, and the cleaner function is ignored. 

## The expected behavior
The console should show the warning:

```
Warning: An effect function must not return anything besides a function, which is used for clean-up.

It looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

useEffect(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state
```"
facebook/react,2021-11-20 12:40:28,bug,"React 18 Bug: react-dom/server ""Detected multiple renderers..."" if preceeded by react-test-renderer","<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.0.0-beta-149b420f6-20211119

## Steps To Reproduce

1. render a context with `react-test-renderer` (wrapped in act)
2. render the same context with `react-dom/server`

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-18-react-test-renderer-react-dom-server-forked-lbs7j?file=/package.json:189-219
```js
const Context = React.createContext(null);

function Component({ renderer }) {
  return (
    <Context.Provider value={renderer}>
      <div />
    </Context.Provider>
  );
}

let testRendererRoot;
ReactTestRenderer.act(() => {
  testRendererRoot = ReactTestRenderer.create(
    <Component renderer=""react-test-renderer"" />
  );
});
ReactTestRenderer.act(() => {
  testRendererRoot.unmount();
});

ReactDOMServer.renderToString(<Component renderer=""react-dom/server"" />);
```

## The current behavior

`renderToString` results in the console error ""Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.""


## The expected behavior

No error like in React 17 (https://codesandbox.io/s/react-17-react-test-renderer-react-dom-server-yr8gx).
Considering all renders are wrapped in their corresponding `act` I don't expect that I'm concurrently rendering. 

I tried to understand when we reset the `rendererSigil` (responsible for checking if we ""concurrently rendering"") is reset and it seems like we never reset it but only initialize it when creating the context (`createContext`)
So it either seems like multiple renderers in the same module are not supported anymore or the reset is missing.

"
facebook/react,2021-11-15 21:35:11,bug,[DevTools Bug] Cannot read properties of undefined (reading 'push'),"### Website or app

https://codesandbox.io/s/react-devtools-weird-bug-o3sib?file=/src/App.js

### Repro steps

I stumbled across the weirdest bug with React DevTools and hooks that causes it to error out when inspecting a component. A minimal test case is documented in the Code Sandbox link, along with more details on the behavior and seemingly-arbitrary fixes. This does not affect the actual functionality of the app itself in any way, it behaves exactly as expected.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.21.0-2f8f60ca8

### Error message (automated)

Cannot read properties of undefined (reading 'push')

### Error call stack (automated)

```text
at J (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13006:7)
    at L (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13040:10)
    at exports.inspectHooksOfFiber (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13101:12)
    at inspectElementRaw (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:7732:65)
    at Object.inspectElement (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8004:38)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:9837:56
    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4257:18)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:10500:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:11737:9)
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38726:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37092:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37572:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40146:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35254:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35695:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42085:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37092:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37222:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37256:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37222:3)
    at SchedulingProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43423:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:41711:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30116:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30727:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37635:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53004:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot read properties of undefined (reading 'push') in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-11-11 08:34:48,bug,"Bug: React instrumentation encountered an error: Error: Could not find ID for Fiber ""Portal""","<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:  17.0.2

## Steps To Reproduce
1. 
> when i execute `Modal.hide()` 

2.
![image](https://user-images.githubusercontent.com/36684351/141264440-be0f55b9-4aa8-4ff4-a9de-1c8c0291f813.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
![image](https://user-images.githubusercontent.com/36684351/141264419-bcb20cd5-8f69-44d8-a8b2-2cf5c64882b8.png)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
facebook/react,2021-11-03 18:31:39,bug,[DevTools Bug] dispatcher.useId is not a function,"### Website or app

https://c8wik.csb.app/

### Repro steps

1. open https://c8wik.csb.app/
2. Inspect `App`

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.21.0-2f8f60ca8

### Error message (automated)

dispatcher.useId is not a function

### Error call stack (automated)

```text
at useId (https://c8wik.csb.app/node_modules/react/cjs/react.development.js:1707:21)
    at App (https://c8wik.csb.app/src/index.js:15:31)
    at L (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13032:5)
    at exports.inspectHooksOfFiber (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13101:12)
    at inspectElementRaw (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:7732:65)
    at Object.inspectElement (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8004:38)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:9837:56
    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4257:18)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:10500:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:11737:9)
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38726:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37092:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37572:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40146:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35254:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35695:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42085:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37092:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37222:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37256:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37222:3)
    at SchedulingProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43423:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:41711:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30116:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30727:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37635:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53004:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=dispatcher.useId is not a function in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-11-03 14:06:08,bug,Bug: use-sync-external-store fails to install via npm,"When trying to install the `use-sync-external-store` package via npm, I receive an error that it depends on a version of React that doesn't seem to exist.

React version: 17

## Steps To Reproduce

1. `mkdir example && cd example && npm init`
2. `npm i react react-dom use-sync-external-store`

## The current behavior

npm fails to install the `use-sync-external-store` package with the following error:

```
npm i use-sync-external-store
npm ERR! code ERESOLVE
npm ERR! ERESOLVE unable to resolve dependency tree
npm ERR!
npm ERR! While resolving: example@1.0.0
npm ERR! Found: react@17.0.2
npm ERR! node_modules/react
npm ERR!   react@""^17.0.2"" from the root project
npm ERR!
npm ERR! Could not resolve dependency:
npm ERR! peer react@""0.0.0-experimental-45898dacb2-20210828"" from use-sync-external-store@0.0.0-experimental-45898dacb2-20210828
npm ERR! node_modules/use-sync-external-store
npm ERR!   use-sync-external-store@""*"" from the root project
npm ERR!
npm ERR! Fix the upstream dependency conflict, or retry
npm ERR! this command with --force, or --legacy-peer-deps
npm ERR! to accept an incorrect (and potentially broken) dependency resolution.
npm ERR!
```

## The expected behavior

It successfully installs the package and I can use it in React v17 and the latest alpha version."
facebook/react,2021-10-21 16:24:25,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","
![Screen Shot 2021-10-21 at 12 23 23 PM](https://user-images.githubusercontent.com/10363251/138318510-7806a238-ff15-4ce9-87d6-5a8304e503f4.png)
![Screen Shot 2021-10-21 at 12 22 57 PM](https://user-images.githubusercontent.com/10363251/138318511-04e41128-632c-4045-8129-5f07b6729f16.png)
### Website or app

daily harvest

### Repro steps

1. Enable debug on the IOS emulator.
2. Enable Inspector.
3. Disable inspector, navigate to a different screen.
4. Try enabling inspector again. 

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.18.0-f58bbcf9a

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at /Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:344699
    at c.emit (/Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:280870)
    at /Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:282341
    at /Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:650666
    at Array.forEach (<anonymous>)
    at A.e.onmessage (/Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:650650)
    at A.t (/Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:40:3009)
    at A.emit (events.js:315:20)
    at e.exports.F (/Users/krishnagaurav/mobile-app/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:8:9731)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-10-20 08:46:39,bug,[DevTools Bug]: Blank tools localhost - react_devtools_backend.js:5821 Uncaught Error: Could not find ID for Fiber,"### Website or app

www.google.com

### Repro steps

React Devtools - 4.20.0
React - 16.8.6

Not sure if relevant but:
react-scripts 4.0.3

First I get an blank devtools (components) but when picking select element arrow and hover over elements a lot of errors like this one shows up in the console:

```
react_devtools_backend.js:5821 Uncaught Error: Could not find ID for Fiber ""Context.Provider""
    at getFiberIDThrows (react_devtools_backend.js:5821)
    at Object.getFiberIDForNative (react_devtools_backend.js:7257)
    at Overlay_Overlay.inspect (react_devtools_backend.js:9158)
    at showOverlay (react_devtools_backend.js:9286)
    at onPointerOver (react_devtools_backend.js:9445)
getFiberIDThrows @ react_devtools_backend.js:5821
getFiberIDForNative @ react_devtools_backend.js:7257
inspect @ react_devtools_backend.js:9158
showOverlay @ react_devtools_backend.js:9286
onPointerOver @ react_devtools_backend.js:9445
```
No other errors occur. Devtools works fine on deployed version. Eg. https://reactjs.org/ works fine. 

PR and issue that could be related?
[Issue 22577](https://github.com/facebook/react/issues/22577
)
[PR 22527](https://github.com/facebook/react/pull/22527
)

Maybe relevant comment from author and maintainer of React DevTools:
[Earlier fiber problem](https://stackoverflow.com/questions/67623677/warning-react-instrumentation-encountered-an-error-error-could-not-find-id-fo)

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-10-18 10:24:54,bug,[DevTools Bug]: Blank tools localhost only,"### Website or app

google.com

### Repro steps

This started after last update 4.20.0
![image](https://user-images.githubusercontent.com/11052469/137713404-e6702959-7870-46a6-8566-4cfe61d25309.png)
![image](https://user-images.githubusercontent.com/11052469/137713464-c5e478d2-4e9e-4ee4-abdf-83d23c04704b.png)


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-10-15 19:16:38,bug,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","### Website or app

https://wayray.com/#how-we-work

### Repro steps

not able to see

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.2-20ca9b565

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25708:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23923:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24083:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:52511:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-10-08 13:01:20,bug,"[DevTools Bug] Cannot add node ""2934"" because a node with that id is already in the Store.","### Website or app

http:localhost:3000/

### Repro steps

When I was using react select and dropdown. I clicked on and before opening the dropdown this error showed up and react dev tools stopped working

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.0-2178a831a

### Error message (automated)

Cannot add node ""2934"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25701:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23916:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24076:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:52332:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-10-01 13:24:11,bug,"[DevTools Bug] Could not inspect element with id ""15"". Error thrown:Cached data for element ""15"" not found","### Website or app

https://github.com/santhosh-reddy03/react_practice

### Repro steps

$cd repo
and then start the server using npm start

in browser(mozilla firefox)
when i try to add the user and age, and trying to debug the output in ListUsers component, I m facing this error
![Screenshot from 2021-10-01 18-52-36](https://user-images.githubusercontent.com/53914022/135627139-ca7132b6-f39d-4330-8b7d-0cc5281ab552.png)


### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.0-2178a831a

### Error message (automated)

Could not inspect element with id ""15"". Error thrown:Cached data for element ""15"" not found

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
InspectedElementContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:38121:43
Suspense
ErrorBoundary_ErrorBoundary@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36518:5
div
InspectedElementErrorBoundaryWrapper@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36967:46
NativeStyleContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:39541:38
div
div
OwnersListContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:34741:37
SettingsModalContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:35182:40
Components_Components@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:41481:52
ErrorBoundary_ErrorBoundary@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36518:5
div
div
ThemeProvider@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36635:23
PortaledContent@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36669:34
div
div
div
ThemeProvider@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36635:23
SchedulingProfilerContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:42673:45
ProfilerContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:41106:35
TreeContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:29603:31
SettingsContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:30214:35
ModalDialogContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:37030:38
DevTools_DevTools@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:52130:27
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id . Error thrown:
Cached data for element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2021-09-24 20:15:48,bug,[DevTools Bug]: Emoji as visual helper produce strange symbole,"### Website or app

https://codesandbox.io/s/react-playground-forked-j4niq

### Repro steps

Emoji seem supported but produce strange symbole

![image](https://user-images.githubusercontent.com/24865815/133793744-55a55582-90ad-425f-8a40-4c061a3c1d80.png)

To test emoji on Window Os, use `[win]+[.]` 🟩


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-09-17 13:52:27,bug,[DevTools Bug]:  Emoji seem supported but produce strange symbole,"### Website or app

????

### Repro steps


Emoji seem supported but produce strange symbole

![image](https://user-images.githubusercontent.com/24865815/133793744-55a55582-90ad-425f-8a40-4c061a3c1d80.png)

Very low priority maybe because it affect nothing .

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-09-15 19:15:59,bug,[DevTools Bug]: Hook parsing fails with fetch error,"### Website or app

https://p181.p1.n0.cdn.getcloudapp.com/items/4gulW8Wo/3bba0881-ee74-4478-8cb8-68370b878855.jpg?v=ab371b6e8fca2cee905d1b9f828ac0d8

### Repro steps

have a webpack project that uses a domain mapped to your local IP such as (appx.whenidev.net) in my case that's served with https
try to resolve hook names
check console and observe the million errors

https://p181.p1.n0.cdn.getcloudapp.com/items/4gulW8Wo/3bba0881-ee74-4478-8cb8-68370b878855.jpg?v=ab371b6e8fca2cee905d1b9f828ac0d8 shows my console

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-09-14 15:08:34,bug,DevTools: Backend console settings reportedly not synced to RN backend,"@feedthejim reported that disabling the ""Break on Warning"" feature does not update the backend settings (in memory, without a reload) for React Native:
![Screen Shot 2021-09-14 at 11 07 04 AM](https://user-images.githubusercontent.com/29597/133283506-88094c34-7251-461e-af3b-67f83e9804fd.png)

I believe the new settings should be updated here:
https://github.com/facebook/react/blob/263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9/packages/react-devtools-shared/src/backend/console.js#L133-L138

But it sounds like they aren't. We should investigate."
facebook/react,2021-09-08 07:31:12,bug,"[DevTools Bug] Could not inspect element with id ""28"". Error thrown:Cached data for element ""28"" not found","### Website or app

website URL (localhost)

### Repro steps

Clicked the ""Reload Devtools"" button to turn devtools in light mode.
Devtools were already in light mode.

### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.18.0-f58bbcf9a

### Error message (automated)

Could not inspect element with id ""28"". Error thrown:Cached data for element ""28"" not found

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37563:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36097:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36542:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38972:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34323:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34764:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40911:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36097:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36215:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36249:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36215:3)
    at SchedulingProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42093:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40537:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29185:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29796:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36605:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51354:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id . Error thrown:
Cached data for element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
facebook/react,2023-03-08 23:01:21,feature,[DevTools Bug]: provide an icon to Edge devtools?,"### Website or app

Website: https://reactjs.org/

### Repro steps

1. open developer tools in Edge
2. go to settings -> experiment -> enable Focus Mode -> reload DevTools
3. we can see the react extension is loaded as below in devtools:
![image](https://user-images.githubusercontent.com/108438266/223870494-509d7658-220c-45e5-8399-05a0fa1e6171.png)

4. since the react extension doesn't provide the icon when it's created, devtools fallback to use the default icon to represent the extension. However, we've received couple of requests from users that they'd like to see the icon in the panel.
for instance:
![image](https://user-images.githubusercontent.com/108438266/223870622-a68fa934-4ba0-450b-aa02-96c66ccab1cb.png)

Wondering if it's possible to provide an icon to Edge in the `chrome.devtools.panels.create()`?
Thank you for your support.

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
facebook/react,2021-07-27 18:34:14,feature,Bug: `onResize` media event is missing,"Note: I’m happy to make a pull request to fix this, I just wanted to log it first to ensure there’s interest.

---

React’s [synthetic media events](https://reactjs.org/docs/events.html#media-events) contain several [existing media events](https://html.spec.whatwg.org/multipage/media.html#mediaevents), for instance `onLoadedMetadata` and `onVolumeChange`. But there is no `onResize` handler.

[`resize` is a standard media event](https://html.spec.whatwg.org/multipage/media.html#event-media-resize) that triggers when one or both of the `videoWidth` and `videoHeight` attributes have just been updated. It’s useful for responding to resolution changes in video players.

React version: 17.0.2 (latest release as of initial issue report)

## Steps To Reproduce

1. Create a `<video>` element with an `onResize` prop.
2. Check the console for the following warning:

```
 Warning: Unknown event handler property `onResize`. It will be ignored.
```

Link to code example: https://codesandbox.io/s/musing-snowflake-zb0qh?file=/src/App.js

## The current behavior

`onResize` handlers are ignored on `<video>` elements.

## The expected behavior

`onResize` handlers are valid on `<video>` elements."
facebook/react,2020-12-11 09:37:45,feature,Feature Request(devtools): `launch-editor` for selected component,"### Why: 

User can open the source file in editor/ide by one-click.

It' is a useful feature in `vue-devtools`.

---

### How: 

Add a click event on here:

https://github.com/facebook/react/blob/cdfde3ae110844baf068706e7ed3fe97ec15f1d7/packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js#L226-L228

call ```fetch(`/__open-in-editor?file=${fileName}:${lineNumber}`)```

Add [launch-editor-middleware](https://github.com/yyx990803/launch-editor) to dev-server(or any scaffold handle by himself)

---

Before anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?"
facebook/react,2020-07-04 14:22:02,feature,Feature proposal: Hook equivalent to createSlice from Redux Toolkit?,"Would this be useful?

> A function that accepts an initial state, an object full of reducer functions, and a ""slice name"", and automatically generates action creators and action types that correspond to the reducers and state.

From [createSlice](https://redux-toolkit.js.org/api/createSlice)."
facebook/react,2020-05-29 18:28:30,feature,[DevTools Feature Request] Break on Warnings,"It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening.

```
console.error = function() {
  ...
  if (isBreakOn) {
    debugger;
  }
}
```

See https://github.com/facebook/react/pull/19044"
facebook/react,2020-04-16 16:13:34,feature,Allow opting out of invokeGuardedCallbackDev,"At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.

It works well. So well that several testing frameworks also get their uncaught exception handling triggered.

**Example with mocha:**
```js
import React from 'react';
import { render } from '@testing-library/react';

function MyComponent({ doThrow }) {
    if (doThrow) { throw new Error('I'm bad'); }
    return <div></div>;
}

it('should throw', function () {
    expect(() => {
        render(<MyComponent doThrow/>);
    }).to.throw();
});
```
**Behavior:**
- When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).
- When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.

The root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block… and trips Mocha.js uncaught exception detector.

*Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*

*Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*

**Expected behavior:**
- Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.
"
facebook/react,2020-04-02 23:13:49,feature,"DevTools: Hovering ""Rendered by"" list should highlight elements","This list is pretty awesome:

<img width=""390"" alt=""Screenshot 2020-04-03 at 00 12 08"" src=""https://user-images.githubusercontent.com/810438/78308234-e0047780-753f-11ea-9d4f-1e2d31e5baa0.png"">

But always struggle to guess which component in the owner list I need to jump to.

We should make hovering the owner list highlight components, just like the main tree view does.

@hristo-kanchev, interested?"
facebook/react,2019-12-29 13:28:56,feature,Add colors to component's name ( in Component tree ) for visual feedback about type of Component or Node,"**What is the current behavior?**

All the components name  in the Component tree are of the same color

**What is the expected behavior?**

It would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.
"
facebook/react,2019-10-31 12:41:06,feature,react-refresh: add options to override $RefreshReg$ and $RefreshSig$ for better System.js integration,"**Do you want to request a *feature* or report a *bug*?**
Feature

Right now babel plugin emits globals: https://github.com/facebook/react/issues/16604

```js
window.$RefreshReg$ = () => {};
window.$RefreshSig$ = () => type => type;
```

It would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:

```js
import runtime from 'react-refresh/runtime'
runtime.injectIntoGlobalHook(window)

System.constructor.prototype.createContext = function (url) {
  return {
    url,
    $RefreshSig$: runtime.createSignatureFunctionForTransform,
    $RefreshReg$: (type, id) => {
      id = url + ' ' + id
      runtime.register(type, id)
    }
  };
};
```

If you don't mind I could create PR with changes to react-refresh/babel next week.

environment:
```js
{
    ""systemjs"": ""^6.1.4"",
    ""react"": ""^16.11.0"",
    ""react-dom"": ""^16.11.0"",
    ""react-refresh"": ""^0.6.0""
 }
```"
facebook/react,2019-10-08 13:18:53,feature,Apply props/state/hooks edits on blur,"**Do you want to request a *feature* or report a *bug*?**
feature
**What is the current behavior?**
trigger by press enter button
**What is the expected behavior?**
trigger by out of focus or pressing enter button
"
facebook/react,2019-10-01 04:14:04,feature,React DevTools force re-render button,"I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:

![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)

This can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do.

This would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a ""forceRender"" function:

```jsx
function useForceRerender() {
  const [, set] = React.useState()
  return React.useCallback(() => set({}), [])
}

function FilterComponent() {
  const forceRerender = useForceRerender()
 
  return (
    <>
      <button onClick={forceRerender}>force rerender</button>
      {/* more JSX */}
    </>
  )
}
```

Would be cool to have this built-in :)"
facebook/react,2019-08-30 15:30:57,feature,"Enhance React DevTools ""Why did this render?"" for values nested in prop objects","
**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**
[as demonstrated here, ""Why did this render?""](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.

**What is the expected behavior?**
The ""why did this render?"" shows a collapsible tree with the ""leaf"" value that changed inside the prop object displayed.

A couple use cases this would benefit:
In some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools.

In rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

New feature never before released in React DevTools. I am using `16.8.6`
"
facebook/react,2019-08-22 14:37:38,feature,"Show property type of value (string,int,etc) on state/props.","**feature**

**What is the current behavior?**
On the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: ""1"" (string) or id: 1 (int)). Both string and int are shown without quotes.

**What is the expected behavior?**
I want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.
`id: ""1""`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I'm using version:
4.0.5 (8/19/2019)

Did this work in previous versions of React?
Yes, 3.*"
facebook/react,2019-08-17 09:45:03,feature,Devtools V4: Where is Highlight Updates?,"If I understood correctly, this is the correct repository for devtools v4, right?

I just noticed that react devtool were updated. I'm missing the ""Highlight Updates"" function.
How can I activate it?

![image](https://user-images.githubusercontent.com/12381373/63209674-4ab58f80-c0e4-11e9-8134-40789625c81e.png)

![image](https://user-images.githubusercontent.com/12381373/63209676-543ef780-c0e4-11e9-8128-a73c4b6bf8f7.png)

Version: 4.0.2 (8/15/2019)
"
facebook/react,2019-08-16 19:59:04,feature,New Devtools Cannot Expand Obervables,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Devtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.
![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/embed/clever-blackwell-h0nzb

Check the props of the wrappedComponent in devtools. store.things does not expand.

**What is the expected behavior?**
Devtools should expand Observables as it does any other object.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
This only seems to be an issue with Observables created by Mob v4. v5 works as expected.
"
facebook/react,2019-08-08 15:43:18,feature,[Feature Request] Finish/normalize Portal API,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the expected behavior?**

Portals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can’t be server-side rendered. And so on.

This is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:

* Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`
* Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)
* Deprecate `ReactDOM.createPortal()`

Now with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:

```
function App(props) {
  const modal = useRef(null)
  return (
    <div>
      <ModalContext.Provider value={modal}>
        <div>{props.content}</div>
      </ModalContext.Provider>
      <div ref={modal} />
    </div>
  )
}

function Modal(props) {
  const modal = useContext(ModalContext)
  return React.createPortal(
    props.children,
    modal,
  )
}

// Somewhere in {props.content} tree...
return (
  <>
    {visible && (
      <Modal>
        Hello, World!
      </Modal>
    )}
  </>
)
```

After `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:

```
this.el = React.createRef(document.createElement('div'))
```

for the same behavior.

As an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn’t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works."
facebook/react,2019-04-26 16:51:51,feature,Allow ReactNode as a type for the child of <option/>,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Currently, the options element only allows types number and string. 

**What is the expected behavior?**
An option should allow for a ReactNode as a child in addition to a number + string. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All versions.
All browser types.
To the best of my knowledge, no.

p.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way. "
facebook/react,2019-04-11 23:18:44,feature,Provide withHooks HOC to decouple hooks and components,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Currently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly.
This [issue thread on the recompose repo](https://github.com/acdlite/recompose/issues/756) discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself.

**What is the expected behavior?**
React should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react.

```jsx
const withHooks = mapHooksToProps => WrappedComponent => {
  return props => {
    let hookProps = mapHooksToProps(props);
    return <WrappedComponent {...hookProps} {...props} />;
  };
};

const Counter = props => {
  return (
    <div>
      <div>Counter: {props.counter}</div>
      <button onClick={props.increment}>Increment</button>
      <button onClick={props.decrement}>Decrement</button>
    </div>
  );
};

const mapHooksToProps = props => {
  let [counter, setCounter] = useState(0);

  return {
    counter,
    increment: () => setCounter(prev => prev + 1),
    decrement: () => setCounter(prev => prev - 1)
  };
};

const EnhancedCounter = withHooks(mapHooksToProps)(Counter);
```

Demo:
https://codesandbox.io/s/ympq0rlv79

Some reasons why this is nice:

1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'.

2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component.
 
3) Testing is also easier because we can test the component in isolation without the hooks baked in.

4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing `<EnhancedCounter counter={10} />`. A real world example of hooks making things harder to override includes material-ui's [new styling approach via hooks](https://material-ui.com/css-in-js/basics/#hook-api). Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach:
```jsx
export default function Hook(props) {
  let classes = useStyles();
  classes = {...classes, ...props.classes};
  return <Button className={classes.root}>Hook</Button>;
}
```
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
For versions of react >= 16.8"
facebook/react,2019-04-05 02:01:02,feature,feature request: export of ReactDOM libraries,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

it's a *feature*.

**What is the current behavior?**

[Internal shared libraries of ReactDOM](https://github.com/facebook/react/tree/master/packages/react-dom/src/shared) is not exported.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

n/a

**What is the expected behavior?**

It is great that some shared libraries such as [`isCustomComponent`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js) or [`DOMNamespaces`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMNamespaces.js) are exported from `react-dom` and available externally.

They are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at https://github.com/yannickcr/eslint-plugin-react/issues/1752.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

n/a"
facebook/react,2019-03-31 01:39:03,feature,Add option in shallow renderer to run effects/componentDidUpdate/componentDidMount,"**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
the shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)

**What is the expected behavior?**
See [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests. 

If the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.

Enzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All and no it was never supported AFAIK"
facebook/react,2019-03-25 16:40:16,feature,Using context to pass down mount order to children with concurrent,"**Do you want to request a *feature* or report a *bug*?**

Feature / use case

**What is the current behavior?**

It seems currently there is no way to get the order of children from the children themselves with context.

**What is the expected behavior?**

I've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.

Example 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:

```ts
let BreadcrumbOrder = createContext({ index: -1, total: -1 })

let Button = props => {
  let order = useContext(BreadcrumbOrder)
  return <div style={{ borderRight: order.index > total ? '1px solid red' : 'none' }} {...props} />
}

let MyView = () => {
  return (
    <BreadcrumbProvider>
      <Button />
      <Button />
      <div><Button /></div>
    </BreadcrumbProvider>
  )
}
```

Where MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.

The other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.

Really this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?

Namely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this."
facebook/react,2019-03-20 06:42:44,feature,[useContext] Throw error if 'useContext' is used outside function components,"**Do you want to request a *feature* or report a *bug*?**
Feature (need better errors)

**What is the current behavior?**
Consider the following functional component
```
import React, { useContext } from ""React""

const myFunctionComponent = props => <div>Hello useContext</div>
```

The immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows

```
import React, { useContext } from ""React""
import MyContext from ""./MyContext""

// React does not throw error
const { myContextValue } = useContext(MyContext)

const myFunctionComponent = props => <div>Hello useContext - {myContextValue}</div>
```

The way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this

```
import React, { useContext } from ""React""
import MyContext from ""./MyContext""

const myFunctionComponent = props => {
 const { myContextValue } = useContext(MyContext)
 return (<div>Hello useContext - {myContextValue}</div>)
}
```

Not only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue.


**What is the expected behavior?**

React should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React `16.8.x` with hooks support
"
facebook/react,2019-02-26 11:20:48,feature,[ESLint] Hardcore rule allowing default hooks using only inside custom ones,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
There is no rule

**What is the expected behavior?**
We have some hardcore plugins like `eslint-plugin-lodash-fp`.
Why not have ESLint hardcore rule allowing default hooks using only inside custom ones?
"
facebook/react,2019-02-12 14:02:43,feature,Pass dependencies to `useMemo` callback as arguments,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

The `useMemo` factory function does not receive any arguments.

**What is the desired behavior?**

The `useMemo` factory function would receive the dependencies as arguments.

**Why?**

This would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too 

**Example of current behavior**

```jsx
const Avatar = () => {
  const [src] = useSomeGlobalState([
    state => state.user.avatar.src
  ]);
  return useMemo(() => <img src={src} />, [src])
}
```

**Example of proposed behavior**

```jsx
const Avatar = () => 
  useMemo(
    (src) => <img src={src} />,
    useSomeGlobalState([state => state.user.avatar.src])
  );
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.8.1
"
facebook/react,2019-02-06 15:22:53,feature,Unhelpful warning for `act` for react-dom@16.8,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature/Improvement

**What is the current behavior?**

If there is test code that should be wrapped in `act(...)` then the current warning is given:

```
 console.error node_modules/react-dom/cjs/react-dom.development.js:506
    Warning: An update to null inside a test was not wrapped in act(...).

    When testing, code that causes React state updates should be wrapped into act(...):

    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */

    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act
```

When upgrading a large code base, this is basically useless.

**What is the expected behavior?**

Provide at least the test name if not the line number of code that triggered the warning.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react@16.8.0
react-dom@16.8.0"
facebook/react,2019-02-03 00:52:14,feature,adding if directive ,"if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion 

**regular way**
```js
const App = (props) => {reactif={true}
    let name = props.name;
    return (
        <div >
            {name === 'koko' ? <div className=""yousef"">{name}</div> : null}
        </div>
    )
}

ReactDOM.render(<App name=""koko"" />, document.getElementById('app'))
```
**my way** ( i edited the react file btw and it worked )
```js
const App = (props) => {
    let name = props.name;
    return (
        <div >
            <div className=""yousef"" reactif={name === 'koko'}>{name}</div> 
        </div>
    )
}

ReactDOM.render(<App name=""koko"" />, document.getElementById('app'))
```
**mmm**
i hope you talk that into consideration 
i mean less than 1kb will not make difference :""D

**React code**
```js
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true,
  reactif: true
};

if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }
    // i added that
    if (config.reactif){
      reactif = config.reactif
      if (reactif === false){
        return null
      } else if (reactif !== true || reactif !== false){
        console.error('reactif expression didn\\'t return bolean value')
      }
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
 }
```"
facebook/react,2019-01-27 06:20:31,feature,Support Proxy as child,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Objects are not valid as a React child

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
N/A

**What is the expected behavior?**
I'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders.

A parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy[Symbol.toPrimitive]()`, which is called by JS automatically when used in this sort of expression.

However, this doesn't work if the child now passes the proxy directly to React as a child:
```jsx
  return (<span>{this.props.childValue</span>);
```
React will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`.

The relevant code is found [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189-L204). The alternative could be for React to check if there's a `child[Symbol.tpPrimitive]` and, if so, evaluate it to find the intended value, and to retry with this value as the child.
It could be as simple as inserting the following code [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189):
```js
  if (typeof Symbol !== 'undefined') {
    const toPrimitive = children[Symbol.toPrimitive];
    if (toPrimitive) {
      const value = toPrimitive('string');
      if (typeof value !== 'object') {
		return traverseAllChildrenImpl(
		  value,
		  nameSoFar,
		  callback,
		  traverseContext,
		)
      }
    }
  }
```

It would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed.

If the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All version, never worked before."
facebook/react,2018-12-29 21:32:16,feature,Make it easier to debug when Context uses defaultValue accidentally due to no provider,"I just spend several hours debugging app blaming everything except me ofc.
I am using this useTheme Hook.

```ts
import React from 'react';
import ThemeContext from '../contexts/ThemeContext';

const useTheme = () => {
  const theme = React.useContext(ThemeContext);
  //if (theme == null)
  //  throw Error('useTheme: Please provide ThemeContext value.');
  return theme;
};

export default useTheme;
```

Some styles were light while other dark. Very strange.
Then I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.
ThemeContext had an initial value different than provided.

While it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.

Therefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.

Because of DX, React should reconsider default / initial context values. In my humble opinion.


"
facebook/react,2018-12-08 04:31:01,feature,eslint-plugin-react-hooks should report errors inside unnamed functions,"I want to report a bug for the hooks plugin.

**What is the current behavior?**
There was no error report after running eslint, but the component failed when running in the browser.
From the chrome dev console it reported ""Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement."" 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.
Here is a link to the github repo:
https://github.com/paboulos/react-hooks-eslint

**What is the expected behavior?**
Followed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. 
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Using window 10 OS and Chrome browser.
1. First ran npx create-react-app Hooks
2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2
3. Installed eslint dev dependencies:
 ""babel-eslint"": ""9.0.0"",
    ""babel-loader"": ""8.0.4"",
    ""eslint"": ""5.9.0"",
    ""eslint-config-airbnb"": ""17.1.0"",
    ""eslint-loader"": ""2.1.1"",
    ""eslint-plugin-import"": ""2.14.0"",
    ""eslint-plugin-jsx-a11y"": ""6.1.2"",
    ""eslint-plugin-react"": ""7.11.1"",
    ""eslint-plugin-react-hooks"": ""0.0.0""
4. Created the .eslintrc.json following the instructions from the Hooks API Doc
Then ran package script lint as follows: ""npm run lint""
no errors reported.
Then ran package script start as follows: ""npm start""
The React component CountHooks calls useState incorrectly and reports error in the browser dev console."
facebook/react,2018-11-28 13:34:22,feature,Feature Idea: useError hook,"**Do you want to request a *feature* or report a *bug*?** 

Feature idea

**What is the current behavior?**

Currently there is no hook for dealing with errors in a component's sub-tree.

**What is the expected behavior?**

Have a hook that allows for functional components to act as Error Boundaries.

Example:

```
function myErrorBoundary() {
  const caughtError = useErrorCatching();
  if (caughtError !== null) { return <ErrorHandler error={caughtError} />; }
  return <RegularContent />;
}
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
n/a"
facebook/react,2018-11-19 20:28:56,feature,react-is memo,"Feature request

**What is the current behavior?**
`react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`).
Maybe there are some reasons why it's not implemented?
"
facebook/react,2018-11-15 23:18:21,feature,Support reporting Suspense loading indicator outside of the suspended tree,"Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far.

I have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else.

The user sets the filter and hits the ""filter"" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :)

Now my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?"
facebook/react,2018-11-05 16:28:51,feature,Synthetic KeyboardEvent should support KeyboardEvent.code,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
The current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.

**What is the expected behavior?**
The synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.

Edit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.
"
facebook/react,2018-10-31 21:53:53,feature,Provide a way to trigger useEffect from tests,"Hello,

I tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer.

Here's a small failling Jest test:

```js
import React, { useEffect } from ""react"";
import { create as render } from ""react-test-renderer"";

it(""calls effect"", () => {
  return new Promise(resolve => {
    render(<EffectfulComponent effect={resolve} />);
  });
});

function EffectfulComponent({ effect }) {
  useEffect(effect);

  return null;
}
```

And here's a minimal reproducing repo: https://github.com/skidding/react-test-useeffect

> Note that other _use_ APIs seemed to work (eg. `useContext`)."
facebook/react,2018-10-25 17:04:42,feature,16.6 contextType + getDerivedStateFromProps,"**Do you want to request a *feature* or report a *bug*?** Feature

**What is the current behavior?**

Context not passed into getDerivedStateFromProps:

```
static getDerivedStateFromProps(props, state, context) {}
```

Just curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.

Just curious if there's been any discussion on this."
facebook/react,2018-10-03 12:13:22,feature,Conditional Components,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

Feature

**What is the current behavior?**

Often we will use expressions like this:

`{ !x ? null : <Component title={x.title} /> }`

**What is the desired behavior?**

We would like to have expressive components such as

```
<When c={x}>
   <Component title={x.title} />
</When>
```

In many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.

The issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).

What is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Presumably any version of React."
facebook/react,2018-09-17 17:32:15,feature,Is it possible to use Profiler server side?,"I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called.

Is there a way to do it?
I'm using 16.5.1, NODE_ENV === ""development"".

My code looks like this, works fine client side:
```javascript
import React, { unstable_Profiler } from 'react';

const profilerCallback = (id, phase, actualTime, baseTime, startTime, commitTime) => {
        console.log(`${id}'s ${phase} phase:`);
        console.log(`Actual time: ${actualTime}`);
        console.log(`Base time: ${baseTime}`);
        console.log(`Start time: ${startTime}`);
        console.log(`Commit time: ${commitTime}`);
};

const MyComponent = () => (
    <Profiler id=""card"" onRender={profilerCallback}>
        ...
    </Profiler>
)
```"
facebook/react,2018-08-19 16:58:06,feature,Cache Provider: Add hooks to read and preload in dev mode,"This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.

**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
The package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.

Due to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.

**What is the expected behavior?**
It would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.

With this information we could have a ""redux-devtools""-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.

Tools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.

"
facebook/react,2018-08-13 14:39:15,feature,Provide a `testInstance.context` property to facilitate context testing,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature Request

**What is the current behavior?**
`testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests.

**What is the expected behavior?**
`testInstance.context` should return an object containing the instance's current context

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
At least 16.4.1"
facebook/react,2018-08-09 15:39:29,feature,Ability to use return value of React.Children.map with React.Children.only,"As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:
> Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.

if used. 

This incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).

I believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87). 

I'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use."
facebook/react,2018-07-17 12:18:10,feature,Identify different instances of react component in performance measures,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
**feature**

Can fiber._debugID also be part of performance measure [label](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactDebugFiberPerf.js#L91) along with component name/displayName?

to distinguish/track multiple instances of a react component in performance measures, please let me know if there is any other way already available to achieve this."
facebook/react,2018-06-13 08:58:57,feature,Add a way to compare relative positions of deep children,"Hey,

It seems like there is currently no way to take two mounted component instances and tell which one of them is coming earlier in the application structure (they could have been mounted asynchronously, and tracking the instantiation/render/mount time is not enough). Ideologically I cannot traverse the application tree, that is understandable.

Though, the relative positions are needed sometimes. My use case — I track focusable elements in the application using context (each focusable element reports of its existence to a focus manager which is provided by the context). This is needed to be able to limit the focusablility/accessibility of all elements which are outside of the currently shown modal dialog/popup so that the focus is trapped inside. For the sake of better accessibility, I need to automatically focus first focusable in the modal dialog when I'm in the keyboard navigation mode. So, I have the references to all focusable elements inside the dialog, but I cannot tell which one comes first using public React API. For web there is a workaround to findDOMNode and compareDocumentPosition(), but that doesn't work with React Native.

Can we have something similar to compareDocumentPosition() but for React component instances?

Thanks!
"
facebook/react,2018-05-24 20:33:03,feature,Synthetic (keyboard) events don't implement the .code property,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
`<event>.code` is undefined

**What is the expected behavior?**
`.code` is a very useful part of the KeyboardEvent spec: https://www.w3.org/TR/uievents/#dom-keyboardevent-code

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I am on React 16.3, but I saw no mention of this in today's 16.4 changelog.
"
facebook/react,2018-05-18 18:21:52,feature,Provide HOC for new context API,"I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API?

We can already do this in userland with a little `withContext` helper:

```js
function withContext(Context, Component) {
  return props => {
    return (
      <Context.Consumer>
        {context => <Component {...props} context={context} />}
      </Context.Consumer>
    );
  }
}

const AppWithContext = withContext(MyContext, App);
```

It would be useful to have this built-in to the new context API, something like:

```js
const MyContext = React.createContext();

const AppWithContext = MyContext.provide(App, 'optionalNameOfTheProp');
```

The second argument to `provide` (the prop name) could default to `context`.

Anyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration 😅

[EDIT: Removed example using `this.context`]"
facebook/react,2018-05-08 08:54:03,feature,Cursor jumps to end of input when onChange doesn't call setState,"[Edit]: **I'm asking for a feature**.

**Current Behaviour**
An input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request. 

Repro sandbox: https://codesandbox.io/s/n4k3yx47j
That same code:  
```javascript
import React from ""react"";
import { render } from ""react-dom"";

class Input extends React.Component {
  state = { value: ""TypeANumber"" };

  onChange = e => {
    let nextValue = e.target.value;

    if (/[0-9]/.test(nextValue)) {
      nextValue = this.state.value;
    }
    this.setState({ value: nextValue });
  };

  render() {
    return (
      <input
        type=""text""
        value={this.state.value}
        onChange={this.onChange}
      />
    );
  }
}

render(<Input />, document.getElementById(""root""));
```

**What is the expected behavior?**
I'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change. 

I understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case. 

[Edit]: 
Since raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters. 

Regarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.  

I'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible. 
"
facebook/react,2018-04-26 09:52:26,feature,Allow to specify displayName for createContext() providers and consumers,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
in React tree name of a Context must be like its name in code

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```js
const MyContext = React.createContext(null);
```
```js
   <MyContext.Consumer>
   { data => ... }
   </MyContext.Consumer>
```
let's have a look at React tree in Chrome extention's page

here is Context - not MyContext

**What is the expected behavior?**

expexted to see MyContext

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.2"
facebook/react,2018-04-16 15:06:02,feature,Don't call getDerivedStateFromProps on a PureComponent if props are the same?,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
`getDerivedStateFromProps` is called on a PureComponent even if the props haven't changed

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
As is

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All

I was hoping `getDerivedStateFromProps` wouldn't be called on a PureComponent if the props hadn't changed. Any reason why this shouldn't/couldn't be the case?
"
facebook/react,2018-04-04 14:13:55,feature,Support hydration after HTML minification,"**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**
`React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set.

I did a little repl to replicate this behaviour [here](https://repl.it/@EnoahNetzach/SSR-whitespace-mismatch).

When the server responds, the HTML is correct:

![screen shot 2018-04-04 at 16 08 06](https://user-images.githubusercontent.com/663755/38312693-b1167650-3822-11e8-85f3-0f100caf8a50.png)

but right after hydration, the first `href` is changed: 

![screen shot 2018-04-04 at 16 08 20](https://user-images.githubusercontent.com/663755/38312738-c96e1b4a-3822-11e8-9e7e-0d6a9fa24ed2.png)
and whitespace artifacts are added.

**What is the expected behavior?**
The first `href` should not be changed.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React v16.2
Chrome 65.0
macOS
"
facebook/react,2018-03-30 06:21:12,feature,Provide a better error on React.cloneElement(null/undefined),"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)
"
facebook/react,2018-03-28 20:54:22,feature,Issues with ReactControlledValuePropTypes,"**Do you want to request a *feature* or report a *bug*?**

See below.

**What is the current behavior?**

1. (Bug / Inconsistency)
```jsx
<input type=""radio"" checked={false} />
```
No Warning.

2. (Feature Request)
```jsx
<input type=""radio"" checked={true} onChange={undefined} />
```
`Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'`

3. (Bug?)
```jsx
<select value=""foo"" readOnly={true}>...</select>
```
No warning.

**What is the expected behavior?**

1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does.

2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I ""forgot"" it, but I intended it to be this way.

3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.2.0
Chrome 65

**Other**

A proposed ""fix"" would be to change:

https://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L27-L33

to:

```js
if ( 
    !(propName in props) || // Fixes 1
    hasReadOnlyValue[props.type] || 
    ""onChange"" in props ||  // Fixes 2
    props.readOnly || 
    props.disabled 
 ) { 
```

And:

https://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L44-L49

to:

```js
if (
    !(propName in props[propName]) || // Fixes 1
    ""onChange"" in props || // Fixes 2
    props.readOnly ||
    props.disabled
) {
```"
facebook/react,2018-03-05 23:44:49,feature,Production reconciler Instrumentation,"_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._

Are there any production instrumentation hooks for the reconciler?  Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular).  E.g. equivalent to the `(React Tree Reconciliation)` span.

As best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode."
facebook/react,2018-02-20 05:09:50,feature,Does react still require non-toplevel submit handler?,"**Do you want to request a *feature* or report a *bug*?**

bug? Maybe.

**What is the current behavior?**

Using non-delegated handler for submit event.

**What is the expected behavior?**

After IE9, at least I know, submit event bubbled up.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.2.0"
facebook/react,2018-02-16 00:04:58,feature,Extracting a Context Stack,"A useful feature of context is creating a custom stack of things to see what your component is embedded in side.

I think the primary use case is logging explicitly.

Currently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.

We could provide an API that lazily extracts a whole path of contexts from the tree.

```js
<FooContext.Provider value={""foo""}>
  <FooContext.Provider value={""bar""}>
    <FooContext.Provider value={""baz""}>
      <App />
    </FooContext.Provider>
  </FooContext.Provider>
</FooContext.Provider>
```

```js
class App extends React.Component {
  log() {
    var stack = this.getContextStack(FooContext);
    logToServer(stack); // [""foo"", ""bar"", ""baz""]
  }
  render() {
    return <div onClick={this.log} />;
  }
}
```

It would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.

cc @acdlite "
facebook/react,2018-02-14 19:41:49,feature,Provide a way to perform a synchronous render into another root during the commit phase,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Reentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Here's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.

**What is the expected behavior?**

I'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.

We have a component which manages the DOM tree for all nodes below it outside of React — it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:

```javascript
class ProseMirror extends Component {
	componentDidMount() {
		// ProseMirror manages the DOM for all nodes below this.el.
	}

	setRef(el) {
		this.el = el;
	}

	render() {
		return (<div ref={this.setRef} />);
	}
}
```

As part of its render cycle, our configuration of ProseMirror ends up calling:

```javascript
ReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);
```

to render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:

```javascript
this.el.querySelector('.my-subcomponent')
```

...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Querying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders."
facebook/react,2018-02-08 21:09:50,feature,Add oldProps as additional argument to getDerivedStateFromProps ?,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

`getDerivedStateFromProps` only receives the nextProps and previousState as arguments.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

The deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later.

This is illustrated in the example posted to twitter by @gaearon: https://twitter.com/dan_abramov/status/953612246634188800?lang=en

**What is the expected behavior?**

Ideally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like:

`getDerivedStateFromProps(nextProps, prevState, prevProps)`

This would eliminate the need to constantly assign props to state purely for comparison purposes...

A quick look at the source doesn't make it clear to me how easy this would be though...

https://github.com/facebook/react/blob/4a20ff26ecfe9bc66941d79f7fce2c67be8ee236/packages/react-dom/src/server/ReactPartialRenderer.js#L456

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.0"
facebook/react,2018-01-18 13:02:31,feature,can React support feature like keep-alive in Vue?,"i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted. 

does it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?
"
facebook/react,2018-01-13 04:15:48,feature,Have Fragments support dangerouslySetInnerHTML,"The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag.

```jsx
const HTML = <span>Hello World</span>;

<div key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />
```

which will render:

```html
<div><span>Hello World</span></div>
```

It would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements.

```jsx
const HTML = <span>Hello World</span>;

<Fragment key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />
```

would render:

```jsx
<span>Hello World</span>
```

Simple, obvious and aligned with the current API."
facebook/react,2018-01-09 10:35:40,feature,Symbols as keys in children as arrays or iterators,"**Do you want to request a *feature* or report a *bug*?**

I want to request a feature

**What is the current behavior?**

Using `Symbols` as element keys throws a type error.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

When using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`

[codesandbox here](https://codesandbox.io/s/733pypz57j)

**What is the expected behavior?**
Using `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Using React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation.

~~~

Thanks.
"
facebook/react,2018-01-05 17:04:10,feature,Add React.createRef() as the migration path for string refs,"Creating this issue to track https://github.com/facebook/react/pull/11555. I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x."
facebook/react,2017-12-13 21:24:31,feature,Lifecycle method to build initial state for classes,"**Feature request**
We need to have a way to build the initial state of ReactComponent in case of usage of classes.

**What is the current behavior?**
Warning in case this.state modified in willComponentMount.

Access to partially constructed object in case of somewhat complex state building logic in the constructor.

For example, if we have a hierarchy of classes with the _buildState method called in the constructor to generate an initial state.
Derived class overrides the _buildState method to have a richer state. In result, part of the object related to the derived class won't be constructed yet and can't be accessed in the _buildState.

The buildState approach is currently used in ReSub framework:
https://github.com/Microsoft/ReSub

**What is the expected behavior?**
Rather no warning in case of this.state modification or new Lifecycle method which is called right after constructor call which returns the state.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16+ is affected.
"
facebook/react,2017-12-08 08:31:37,feature,Feature request: Global state at the render/hydrate level,"This is a feature request. It relates to https://discuss.reactjs.org/t/suggestion-for-global-context/9035

This has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree.

I'm speaking about global state. So why not use context? I have a couple of issue with it.

1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express):

    `res.render('homepage.jsx', {});`

But some other page might just as well have:

    res.render('otherpage.jsx', {}) where otherpage has:

    <div>
      <Something />
      <Homepage />
    </div>

Components can be composed however you like, they shouldn't care what depth they're at.

2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve.

3. Having every root component wrapped in some `<Provider>` that publishes context downwards, and every non-root component wrapped in some ""receiver"" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping.

4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things).

-- PROPOSAL --

Why not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version.

Think of it as analogous to Express and the ""req"" object that's passed around. One should always have access to some ""per request"" object. So many things would be useful to put in there (authenticated user, geolocation, ""store"" from Redux, query and route params, etc, etc).

It would look like:

    ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...})

Where request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like:

    if (typeof window != 'undefined') {
      // Client, get value from window object
    } else {
      // Server, get value from filesystem or wherever
    }

Just having global data available to all components in the tree simplifies things a lot. Don't you think?
"
facebook/react,2017-11-27 16:28:49,feature,Add hooks to ReactDOMServer to support caching,"**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
react-dom SSR performance could be improved using server-side cache, but currently the
ReactPartialRenderer is currently not accessible from the `react-dom` package.

**Desired behavior**
On the **server** only, it would be nice if _plugins_ could be used to improve render performance. Currently the only way to do this would be to externally maintain a renderer implementation. However, the `ReactPartialRenderer` already contains all the behavior required to support plugins - with a little refactoring. 

I've refactored the `ReactPartialRenderer` and created a **proof of concept** for supporting _plugins_ for react server side rendering. You can see the [ReactPartialPluginRenderer](https://github.com/adam-26/react/commits/pluginRenderer) in this fork, its comprised of 3 different commits:
* [#1](https://github.com/adam-26/react/commit/0b2f7852a19ffabac6b83581f6821f0346434ef0): Strict refactoring of `ReactPartialRenderer`, the only addition is exporting the `ReactPartialRenderer` from the react-dom server package
* [#2](https://github.com/adam-26/react/commit/d30792a8ba42d50188c0dd1fddbc73275b8ff91f): Create the `ReactPartialPluginRenderer` by extending the refactored `ReactPluginRenderer`, and introduce a plugin interface
* [#3](https://github.com/adam-26/react/commit/d4f01973d535c9eb34ba450190b7c8205fe593df): Proof of concept plugin implementations and application example.

You can [view instructions for running the example in the repo](https://github.com/adam-26/react/tree/pluginRenderer/fixtures/ssrPlugins).

I understand that exporting `ReactPartialRenderer` exposes the internal API, which is far from ideal. Is there any scenario in which `ReactPartialRenderer` would be made to be accessible from the `react-dom` package? Or would a plugin implementation similar to above be required to maintain its own forked `ReactPartialRenderer`? Maintaining the plugin renderer in its own repo isn't a problem, but It would be great if plugins could be used without needing to maintain the core server renderer.

Thanks, Adam.


"
facebook/react,2017-11-13 20:51:46,feature,stopImmediatePropagation is not available for synthetic events,"In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation

It'd be awesome if this was supported on `event` itself. I did see a [prior issue](https://github.com/facebook/react/issues/1734) for this, but it was for a use case that sIP wasn't required for.

For a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade."
facebook/react,2017-10-26 11:13:56,feature,Add a way to opt out of User Timing API calls,"**Do you want to request a *feature* or report a *bug*?**  

bug or v16 feature (dont know)

**What is the current behavior?**  

When building in dev environment, performance timeline measures appear by default,  
ie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)

`react@16.0.0`

if it's not a bug, then what's the way to disable `react` perf measures?  

Need a way to clear timeline to focus on my own custom perf measures.
"
facebook/react,2017-10-22 18:42:36,feature,Release a tool for statistical perf analysis (a replacement for ReactPerf),"**Do you want to request a *feature* or report a *bug*?**
A feature

**What is the current behavior?**
N/A

**What is the expected behavior?**
It's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool.

What was great in the perf tool that is not covered as well with timeline integration?
 - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give)
 - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway.
 - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract.

Basically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16, yes the perf addon in 15 was good."
facebook/react,2017-10-20 21:34:42,feature,Add `code` property to `SyntheticKeyboardEvent`,"**Do you want to request a *feature* or report a *bug*?**

Improvement

**What is the current behavior?**

[`SyntheticKeyboardEvent`](https://github.com/facebook/react/blob/e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b/packages/react-dom/src/events/SyntheticKeyboardEvent.js) does not currently support the `code` property.

`code` ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)) is nice to have when you want to write key-specific handling—rather than input-specific (dependent on layout and modifier keys) handling.

**What is the expected behavior?**

`SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well.

Currently, if you want to use the `keyboardEvent`'s  `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Affects React 16 and earlier (I assume).
"
facebook/react,2017-10-14 00:28:00,feature,Async componentWillReceiveProps to allow state update,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
An (almost) immediate re-render is due after `componentWillReceiveProps` is called, unless `shouldComponentUpdate` says otherwise.

**What is the expected behavior?**
If new props in `componentWillReceiveProps` cause an async call that's soon going to update the state anyway, won't it be cool if React might as well wait for that async call to do it's thing (which calls `setState`) and do one render instead of two?

Potential solution: React can see if `componentWillReceiveProps` returns a `Promise`. If it does it defers the re-render until it `resolves`.

```javascript
async componentWillReceiveProps(nextProps) {
    const { postId } = nextProps;
    const postTitle = await fetch(`https://api.example.com/posts/${postId}`);
    this.setState({ postTitle });
    return;
}
```
"
facebook/react,2017-10-10 19:25:21,feature,React16 not compatible with x3dom,"** This is both bug / feature
https://www.x3dom.org/

I used to be able to use x3dom with React. It was great.

** React ^15 I was able to use the **is** property to generate custom elements and custom attributes that could be picked up by x3dom i.e. <shape is render=""true""/>

Now with React16 i get many warning messages for all of the custom x3dom tag elements. Likewise it seems that certain attributes aren't getting rendered either. For instance if I do x3dom elements like so:

`<fontstyle size=""0.6""/>` I'll get `<fontstyle/>` output without the size attribute.

I don't think React should have to know what x3dom tags are, nor should they be hard-coded into React. There has got to be a way to have React output custom tags without throwing warning messsages. Why not just re-introduce the **is** attribute to indicate that it's a custom tag with custom attributes? "
facebook/react,2017-10-02 14:44:19,feature,Loosen up type requirements for event handlers,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

When adding event handlers, it is common practice to do something like:

```js
const MyButton = ({ canClick, onClick }) =>
  <div onClick={canClick && onClick}></div>
```

This was fine in React 15.x, but in 16 it reports a warning, which is technically correct:

> Expected `onClick` listener to be a function, instead got a value of `boolean` type.

However, this now forces you to use the more verbose variant:

```js
const MyButton = ({ canClick, onClick }) =>
  <div onClick={(canClick && onClick) ? onClick : undefined}></div>
```

**What is the expected behavior?**

I think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything ""falsy"", although that may be too much to ask.

I definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `""""` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16, all browsers. This did not emit a warning in React 15 and below.
"
facebook/react,2017-09-28 20:34:07,feature,Production Check in react-test-renderer,"When upgrading to 16.0.0 from 15.6.1, react-test-renderer started failing on my tests with the message:
> test renderer is not available in production mode.

I have in fact been running unit tests using this renderer during my production build.

I'm trying to understand: why was this restriction introduced?  I saw the change was made in #9514 but couldn't find any explanation on the pull request or the documentation as to why production mode is now disallowed for this renderer.

Thanks,
Alex"
facebook/react,2017-09-27 15:55:53,feature,"""Did not expect server HTML to contain the text node"" due to whitespace in React 16","We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:

`Warning: Did not expect server HTML to contain the text node ""
  "" in <div>.`

We are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem."
facebook/react,2017-09-18 13:39:07,feature,Attach third-party tools to monitor component state updates,"**Do you want to request a *feature* or report a *bug*?**
feature, that exists in previous releases of react

**What is the current behavior?**
feature is not implemented

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions

Hey,
We would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.

https://github.com/facebook/react/pull/8152
(I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request)

Omer
"
facebook/react,2017-09-13 09:06:11,feature,`select` should warn if `value` is not available,"IMO, 
```
<select value=""foo"" onChange={...}>
  <option value=""yes"">Yes</option>
  <option value=""no"">No</option>
</select>
```
should warn because there is no ""foo"" option. It should probably also warn if `value` is not specified, because there is no ""empty"" option either.
One could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one."
facebook/react,2017-08-31 02:56:51,feature,Accept Ref Objects as Refs?,"[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).

These are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.

We could also make these first class objects on isomorphic React.

```js
React.createRef = () => ({ contents: null });
```

```js
class Foo extends React.Component {
  state = {
    myDiv: React.createRef()
  };
  componentDidMount() {
    if (myDiv.contents) {
      myDiv.contents.focus();
    }
  }
  render() {
    return <div ref={this.state.myDiv} />;
  }
}
```

Basically the implementation would just be:

```js
if (typeof ref === 'function') {
  ref(newValue);
} else if (typeof ref === 'object') {
  ref.contents = newValue;
} else if (typeof ref === 'string') {
  owner.refs[ref] = newValue;
}
```

This is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.

cc @adamjernst
"
facebook/react,2017-08-03 04:36:26,feature,Async Top-level Hook Before Commit,"_(This isn't needed for 16.0.)_

I think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.

However, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.

I see two possible routes:

a) We just call out for this hook and then commit immediately after.

b) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with ""append async"" and offscreen canvas.

The second option is probably preferable but we should only do that if we can do it efficiently and cleanly."
facebook/react,2017-07-12 22:38:53,feature,[Feature Suggestion] Publish react also as ES2015 code,"**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**
React is published to NPM only as ES5 code

**What is the expected behavior?**
Publish react also in es2015, with es2015 entry point in the package.json

Motivation: Performance. leverage the targeted client native ES features 
Its part of the angular 4 package format
https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#heading=h.jt2mvxhyrshv
http://2ality.com/2017/04/setting-up-multi-platform-packages.html"
facebook/react,2017-07-01 00:58:07,feature,Nicer Formatting of SSR Validation,"The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.

1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).

2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message. 

3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.

```
...
<div className=""unchanged"">
- <div className=""foo"" />
+ <div className=""bar"">…</div>
+ <span />
</div>
...
<div className=""another_unchanged"">
- <span />
</div>
...
```

This strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning."
facebook/react,2017-06-28 21:15:30,feature,"Feature request: Support server-side rendering of non-standard DOM attribute names (eg. AMP's [prop]=""value"")","**Do you want to request a *feature* or report a *bug*?**
Request a feature

I am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use [amp-bind](https://www.ampproject.org/docs/reference/components/amp-bind#bindings) we need to be able to output “bindings”, which are special attributes of the form `[attribute]`, eg. `[slide]=""selectedSlide""`. 

```
<amp-carousel 
    layout={layout}
    height={height}
    width={width}
    [slide]={slide}
>
        ...
</amp-carousel>
```

Here is AMP carousel example that work with [amp-bind](https://ampbyexample.com/advanced/image_galleries_with_amp-carousel/#linking-carousels-with-amp-bind).

**What is the current behavior?**
- Parsing error: Unexpected token [ (Fatal) 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- All

For more information, you can read all the discussion in this [PR](https://github.com/facebook/react/pull/7311#issuecomment-311516763)."
facebook/react,2017-06-21 20:40:15,feature,Feature request: renderTypes,"**Do you want to request a *feature* or report a *bug*?**
Request a feature

Per some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.

Here's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):
```jsx
function Foo({ yes }){
  return yes ? <Bar /> : <div />;
}
Foo.renderTypes = [Bar, 'div'];


class Bar extends React.Component {
  static renderTypes = [Button];

  render() {
    return <Button />;
  }
}
```
```jsx
function Foo({ yes }): React.Element<Bar | 'div'> {
  return yes ? <Bar /> : <div />;
}

class Bar extends React.Component {
  render(): React.Element<Button> {
    return <Button />;
  }
}
```

Inside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.

Having `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).

I imagine the implementation to be:
 1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)
 1. in development only and if `.renderTypes` exists on the component
 1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,
 1. just like propTypes, log the error if one is returned

(cc @spicyj)"
facebook/react,2017-06-01 21:35:31,feature,Add React.Children.find,"I think a `React.Children.find` method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition. I'm running into this situation more and more often in my React code. A few examples:

- In [React Router](https://reacttraining.com/react-router), the `<Switch>` component [iterates over its children](https://github.com/ReactTraining/react-router/blob/c46e51bfd61343611ddbc173207952e980b81aec/packages/react-router/modules/Switch.js#L38-L49) to figure out which `<Route>` matches the URL.
- In [a `<Select>` component we use in our training workshops](https://github.com/ReactTraining/react-subjects/blob/44614bc3c6c8ca1de813e0bd1e14f86a74a5c0fb/subjects/Select/solution.js#L24-L37), we need to iterate over the `<Option>`s to figure out which label we should show in the select box.

I wonder if there would be any interest from others in seeing something like this."
facebook/react,2017-05-06 12:20:06,feature,Warn when `static propTypes/static defaultProps` in ES6 class is a function,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
```
class TestWrongPropTypes extends Component {
    static propTypes() {
        return {
            children: PropTypes.string,
            missing: PropTypes.string.isRequired
        };
    }

    static defaultProps() {
        return { children: 'Default props via static function' };
    }

    render() {
        return <p>{this.props.children}</p>;
    }
}
```

In this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**
https://jsbin.com/jidupehebu/edit?js,console
https://jsfiddle.net/84v837e9/30/

**What is the expected behavior?**
I know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like ""propTypes/defaultProps is function but should be either property or getter"" to prevent such errors.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Discovered in React 15.X, but probably the same behavior will be also in earlier versions."
facebook/react,2017-04-23 22:49:34,feature,[RFC] Add traversal utility to ReactTestUtils matching toTree shape,"### Problem

The `ReactTestRenderer` now supports a new API, [`toTree`](https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js#L350-L355), which returns an easily traversed tree representing the internal state of the instance and its rendered nodes.

The existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node.

The issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node. 


### Solution

I propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean:

* the predicate function will always be called with the same data structure (a tree node)
* third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure
* You could actually assert on functional components, which currently have no instance and just call the predicate with `null`

This new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results.

```js
import { renderIntoDocument, traverseTree } from 'react-dom/test-utils';
var root = renderIntoDocument(<App />);
var results = [];
traverseTree(root, node => {
  if (somePredicate(node) { results.push(node) }
})
```
 
## Implementation

With a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change:

```js
 var publicInst = node.stateNode;
      if (test(publicInst)) {
        ret.push(publicInst);
      }
```

to:
```js
 var treeNode = toTree(node);
      if (test(treeNode)) {
        ret.push(treeNode);
      }
```

cc @gaearon @bvaughn @lelandrichardson "
facebook/react,2017-03-15 23:11:13,feature,Expose DEV-mode warnings in devtools UI,"React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785).

The team has discussed similar improvements for warnings- such as using a ""yellow box"" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools?

For example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells).

Here's a rough outline of some of the features:
* Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot.
* A new toolbar option could be added to ""Show All Warnings"" (eg filter the tree view to show only components with warnings).
* Warning message could be shown inline in the settings panel for the selected component.

Here's a rough mockup: 
![screen shot 2017-03-15 at 3 47 31 pm](https://cloud.githubusercontent.com/assets/29597/23974108/bc3dabd6-0996-11e7-8d2a-e058c4cafe41.png)

Limitations:
* Not everyone uses devtools so this would not help a lot of people.
* This would not address issues like using the development mode of React for production sites.

Thoughts? Ideas? Suggestions?"
facebook/react,2017-03-03 18:30:15,feature,RFC: ReactFiberReconciler release artifact,"This issue is intended to be a discussion for how to distribute the ReactFiberReconciler.js file and dependencies for custom renderers.

Currently first-class renderers within the React codebase/Facebook ecosystem do not have any concerns for this because of Haste / access to the React.js build + publish tooling within this codebase.

3rd party renderers are currently adding `react-dom` to their dependency list and requiring `react-dom/lib/ReactFiberReconciler.js` to build and expose their custom renderer.

Ideally, `ReactFiberReconciler.js` would be distributed with the `react` package or as a standalone `react-fiber-reconciler` package. Whether this is at `react/reconciler.js` or `react/lib/reconciler.js` idk. I think at the root is better to continue the discouragement of looking in `react/lib/*` for anything.

I understand flat bundles are coming, too. I don’t know if that should block this or if this could be a flat bundle, or any other alternative.

Is this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR?

 Related issues:

* #6795 Create Separate Copies of Each Renderer
* #5472 Include flow type definitions (flow type distribution proposal at https://github.com/facebook/react/issues/5472#issuecomment-282394248)

+ @sebmarkbage @spicyj "
facebook/react,2016-12-08 21:45:39,feature,Provide a way for external tools to list nodes with event info,"I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners.

If somebody can provide a way for me to do this it will be added within a day.

Is this possible at the moment and, if not, what can be done to make this possible?"
facebook/react,2016-09-16 23:21:25,feature,[RFC] Idea: forceDeepUpdate() and forceDeepUpdateWithScope(scope),"_Just going to put it out there for feedback..._
## Motivation

Subscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously. Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated.

Meanwhile, most of what subscriptions are used for is data that will never update. At least in our apps. It is a pure loss.

The use case is when you're connecting to third party systems that aren't as easily connected to the top level data tree.
## Proposal

``` js
this.forceDeepUpdate();
```

Same use case as `forceUpdate`, if you are reading from global mutable state for some reason, you can use this to by-pass `shouldComponentUpdate` in an entire subtree. Basically rerender everything. When combined with Fiber this can be a low-priority update so it's not so bad for things that change a lot of things.

A good example would be changing the locale. Regardless if you read a global mutable locale (like AirBnB does) or a context locale (like Yahoo) does, this lets you change it when you need to. Without needing to manage subscriptions for all those cases when you don't need it.

``` js
this.forceDeepUpdateWithScope(scope);
```

``` js
class Foo extends React.Component {
  shouldComponentUpdateForScope(scope) {
    return scope.store === UserStore && scope.id === this.props.userID;
  }
  render() {
    ...
  }
}
```

`forceDeepUpdateWithScope` would traverse the subtree and only start rendering if `shouldComponentUpdateForScope` returns `true` for the arbitrary `scope` argument. This allows for a bit more of a targeted update with some convenience overhead.

Additionally, React would cache the pair of `scope` and `components` that responded. For some number of scopes back. If a new component gets mounted with a `shouldComponentUpdateForScope` we might check it against the cache to see if we need to add it to the cache.

Effectively this creates **lazy subscriptions**.

The use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page. The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update.
## Caveat

The major downside of this proposal is that it relies on mutation. As we know, React doesn't really like mutation for many more reasons than just `shouldComponentUpdate`.

The effect in Fiber for example, is that any component that gets a higher priority update will start using the new value. Components that rely on mutable state effectively become up-prioritized which is not good. 1) It can temporarily show inconsistent data. 2) The point of making this kind of update lower priority is because it is likely to be large. Larger updates will stall the page if they take the same priority as higher priority updates. Thereby defeating the benefits of Fiber anyway.

I'd like to try to come up with a variant of this API that doesn't rely on mutation.
"
facebook/react,2016-08-30 11:08:45,feature,ReactTestRenderer custom depth rendering,"**Do you want to request a _feature_ or report a _bug_?**
Feature

**What is the current behavior?**

``` jsx
// MyComponent.js
import React from ""react"";
import ThirdPartyComponent from 'third-party-component';

function MyInternalComponent() {
  return <div>test</div>;
}

export default function MyComponent() {
  return <div>
    <MyInternalComponent></MyInternalComponent>
    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>
  </div>;
}

// test.js
import ReactTestRenderer from ""react-test-renderer"";
import React from ""react"";
import MyComponent from ""./MyComponent.js"";

const renderer = ReactTestRenderer.create(<MyComponent/>);

console.log(renderer.toJSON());
```

This renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`.  Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks.

I have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard.

**What is the expected behavior?**

I would love to provide ""blacklist"" of components which I don't want to render:

``` js
import ThirdPartyComponent from 'third-party-component';
//...

const renderer = ReactTestRenderer.create(
    <MyComponent/>, 
    {
        dontRender: [ThirdPartyComponent]
    }
);
```

This would return jsx:

``` js
<div>
    <div>test</div>
    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>
</div>
```

So we can test props returned for `ThirdPartyComponent` and internal logic.

It's combine of full and shallow renderer.

I have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway. 

This possibly would allow to resolve https://github.com/airbnb/enzyme/issues/250.
"
facebook/react,2016-08-03 12:08:31,feature,shouldComponentUpdate doesn't work well if component accepts children,"React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components.

``` js
'use strict';
import React, {Component, PropTypes} from 'react';
import ReactDOM from 'react-dom';
import shallowEqual from 'recompose/shallowEqual';
// shallowEqualExcluding: Fictional function that works like shallowEqual, but ignores changes to a list of props passed as the third argument

class Button extends Component {
    static propTypes = {
        icon: PropTypes.node.isRequired,
        onClick: PropTypes.func
    };

    onClick = (e) => {
        this.props.onClick(e);
    };

    shouldComponentUpdate(nextProps) {
        // @note Doesn't actually work
        return shallowEqualExcluding(this.props, nextProps, ['onClick']);
    }

    render() {
        const {icon} = this.props;

        return (
            <button onClick={this.onClick}>
                {icon}
                {/*React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})*/}
            </button>
        );
    }
}

class Icon extends Component {
    static propTypes = {
        name: PropTypes.string.isRequired,
        color: PropTypes.string
    };

    shouldComponentUpdate(nextProps) {
        return shallowEqual(this.props, nextProps);
    }

    render() {
        const {name, color} = this.props;
        return getSvgIcon(name, color);
    }
}

const nilClick = () => {};
ReactDOM.render(<Button onClick={() => alert('Clicked!')} icon={<Icon name='done'} />, document.querySelector('#container'));
ReactDOM.render(<Button onClick={nilClick} icon={<Icon name='done'} />, document.querySelector('#container')); // 2nd invovation
ReactDOM.render(<Button onClick={nilClick} icon={<Icon name='cancel'} />, document.querySelector('#container')); // 3rd invovation
```

Given this sample; A `<Button />` component that expects an icon to be passed as an `icon` prop and a simple `<Icon />`. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently.

On the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render.
On the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon.

However in practice Button will always re-render, including during the second invocation when nothing changes.

This is because `<Icon />` will always result in a new instance and will never be the same.

Normally you could work around this within the component itself, without telling users they have to store `<Icon />` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render.

In practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably [Material UI](http://www.material-ui.com/) suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances.

I can think of a few ideas on what type of API could be added to React to solve this issue.
## shouldComponentUpdate helper

The most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children.
(As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them)

`React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)`

However I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props.
## ref based shouldComponentUpdate helper

The second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref.

`React.shouldComponentUpdate(this.iconRef, nextProps.icon)`

The downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`.
## render passthrough

The next idea I had was a render passthrough. A way during the render process for a component to say ""I do not need a render()/update, but these children of mine may"" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree.

However those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance

`this.renderRef(this.iconRef, nextProps.icon);`

The advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update.
# partial renders

That `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component.

``` js
class HeavyComponent extends Component {
    shouldComponentUpdate(nextProps) {
        // Ignore icon and children
        return nextProps.text !== this.props.text;
    }

    render() {
        const {text, icon, children} = this.props;

        text = doSomethingAbsurdlyCpuIntensiveAndHardToFactorOutOfThisComponent(text);

        return (
            <div>
                <h2>
                    {React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})}
                    {text}
                </h2>
                <Wrapper ref='subtree'>
                    {children}
                </Wrapper>
        );
    }

    componentSkippedRender(nextProps/*, nextState*/) {
        this.subRender(this.iconRef, React.cloneElement(icon, {ref: (icon) => this.iconRef = icon}));

        this.subRender(
            this.refs.subtree,
            <Wrapper ref='subtree'>
                {children}
            </Wrapper>
        );
    }
}
```

Though `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`.

The `<Wrapper>` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.
"
facebook/react,2016-07-07 18:21:01,feature,Is there a way to let users know which invalid type was returned?,"This is the error message in question: 

```
LabelButton(...): A valid React element (or null) must be returned. 
You may have returned undefined, an array or some other invalid object.
```

Not very helpful. Is it technically possible to _show_ what was returned?
"
facebook/react,2016-06-27 12:36:08,feature,Clean up top-level event listeners after unmounting all roots,"**Do you want to request a _feature_ or report a _bug_?**
Bug - maybe intended behaviour.

**What is the current behavior?**

_Background_
I have an app that needs to be embedded by other apps (other customers). The idea being ""our"" react app has its javascript loaded in an iframe, but the ""main"" window hosts dom elements from the customers and our react app. That bit works fine. As time goes on ""our"" react UI is no longer needed, and then react root is removed, and the iframe destroyed. These apps are often long lived so there will be times when the react app needs to appear again, and the iframe is recreated and everything reloaded. This can and will happen many times.

_Goal_
We would like to NOT keep the iframe around when its not actually needed, but rather re-create just in time when it is needed. This app is used by customers and they would like to embed our ""react"" app, without interference with their ""app"" and all its javascript, which is why we are doing the iframe thing.

_Problem_
It is evident by watching the chrome dev tools ""timeline"" memory graph that memory always increases each time a new iframe is created and the react UI is init'd. Unmounting and destroying the iframe, never causes the memory to drop to ""near"" original before load value. Repeating this process multiple times slowly show an increase memory.

This also causes a more immediate problem, in that react is throwing exceptions on every event (click, type etc) because the window of the iframe is now null.

_Proof: First symptom - Event exceptions (only happens in my app)_
These exceptions only happen in my (cant share) app, i cant repo them, but parts of this apply to all react apps. Please read thru - it will all make sense when you get to the end and if you examine my poc.

Destroying the Iframe, leaves React and its event dispatching system in memory. I have a  mixture of x-tag, webcomponents which are used to ""create"" the iframe and load the react app. After the custom element is used (lets call it <EMBED-REACT>), the console starts showing exceptions all within react code. This is a side effect of the react dispatchEvent still being active and trying to do stuff.

``` javascript
Uncaught TypeError: Cannot read property 'nodeName' of null
shouldUseChangeEvent @ VM1068_embeddedApp.js:14296
extractEvents @ VM1068_embeddedApp.js:14536
extractEvents @ VM1068_embeddedApp.js:13000
handleTopLevel @ VM1068_embeddedApp.js:19816
handleTopLevelImpl @ VM1068_embeddedApp.js:23870
perform @ VM1068_embeddedApp.js:15510
batchedUpdates @ VM1068_embeddedApp.js:23787
batchedUpdates @ VM1068_embeddedApp.js:14673
dispatchEvent @ VM1068_embeddedApp.js:23946
```

I know about `ReactEventListener.dispatchEvent`(snip below) where i can disable react( i havent actually tried) to avoid the exceptions, but that would leave the memory leak.

https://github.com/facebook/react/blob/master/src/renderers/dom/client/ReactEventListener.js#158

``` javascript
 dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }
```

Its rather easy to prove that react remains in memory, simply goto the compiled app, find the `React dispatchEvent` and insert a console.log and watch as it continues to ""print"" stuff after unmounting the last component, even though there are no listeners. In my case the exception is caused because all `extractEvents` eventually default to ""window"" as the ""target"".

There are multiple copies of the same basic idea in various react functions, where it tries to get a target that it assumes will never be null. If one doesnt load react in an iframe, then window is always defined.

``` javascript
var targetNode = targetInst ?
      ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
```

Later the `shouldUseChangeEvent` tries to read the nodeName of the now ""undefined"" window, because its iframe has been destroyed, but that now results in an exception (null pointer etc).

https://github.com/facebook/react/blob/045f1a791c6e17253e9d927ffca70ae5d00b4fe5/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js#L72 ...

``` javascript
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

**What is the expected behavior?**
There are probably two possible solutions, that work in tandem.

1) Firstly React should provide an API that will remove all its global event listeners. Naturally it could complain if there are any active components that remain mounted. This API may be internal/private (not public), if #2 was implemented. It might be called something like `React.shutdownAll` Because everything is gone, the next React render would setup all its globals again.

2) React should dispose of all its global event handlers when the last or ""root"" component is unmounted. This would call the _new api_ mentioned in 1. 

Either option solves my problem, where i wish to either let react shutdown gracefully. With this in mind i could.
- unmount iframe powered react ui component.
- call React.disposeGlobals (mentioned above). If unmounting auto calls an internal `React.shutdownAll` then this step is skipped.
- destroy iframe.

_Proof #2_
Goto your compiled out, locate the `dispatchEvent` and add a console.log, notice even after the last / root container is unmounted stuff will continue to be printed because the event listeners are still active.

I did a very quick scan of the abstraction around adding listeners, and i couldnt see the remove function being stored and then called to cleanup.

_Proof #3_
Look at my last section below where i have a proof of concept form of the popular todomvc react example.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 15.0.2
React-Dom 15.0.2
React-redux 4.4.5 (might be useful to know)

**Reproducable use case**

Sorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons.
- the compile the ""jsx"" content means loading babel etc to compile (babel, jsfiddle etc too many moving parts)
- its ""hard"" to get the ""root component"" that is inserted into the ""output"" box and 
- its even just too ""hard"" to put the jsx compiled output into somewhere for the iframe src= to ""load"".

I have forked the popular todomvc app and added a few minor edits to recreate, reload, render+unmount x100, destroy everything about the app, and try again in a loop separated by a sleep.
- https://todomvc.com (todomvc main site)
- https://github.com/tastejs/todomvc (todomvc github)
- https://github.com/mP1/todomvc/pull/2 (my fork - with comments and snapshots of chrome dev tools timeline memory graph)

Hopefully we can trust the todomvc guys are doing the right thing, no dumb memory leaks. If you examine it should be obvious the only thing im adding is support for my horrible create app, run app, render+unmount many times, render, unmount, sleep a bit and then loop again until counter exhausted.

Sorry if this is boring but as a convenience i will list the basic instructions to ""run"" the react version of my branch on your local machines...
1. clone https://github.com/tastejs/todomvc.git
2. in the root, run ""gulp"", to compile everything.
3. run something like ""python -m SimpleHTTPServer""
   4A. navigate to http://localhost:8000/examples/react/index.html 
   4B. navigate to http://localhost:8000/examples/react/index3.html
   // /examples/react corresponds to the dist/examples/react directory that gulp built into.

My poc supports 3 concepts.
- re-run todomvc over and over again in ""same"" window.
- create iframe, load todomvc js in the iframe but render to outer window, unmount, destroy iframe, try 20x
- create custom element, webcontainer creates iframe and load todomvc js in the iframe but render to outer window, unmount, destroy custom element, try 20x

If you look at my p/r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary.
"
facebook/react,2016-06-22 16:04:08,feature,Expose React build mode/flags,"@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms.  The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment.  We probably want to be able to warn when this happens.

In this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not.  I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags.

Anyway, opening the issue so we have a place to discuss and track.
"
facebook/react,2016-06-14 16:28:53,feature,Improve error messages for invalid states,"I think we should create a test suite that throws errors in different lifecycle methods, and make sure we have relatively sensible invariants as early as possible, preferably with component names.
#6990 is an example of this, but we’ll keep regressing until we actually test for something like this explicitly.

cc @jingc @yungsters @facebook/react-core 
"
facebook/react,2016-05-27 23:23:01,feature,Provide an opt-in way to easily manage `this` in event handlers,"There's no shortage of places in React where a dev will write something like

```
onClick={() => this.setBooksSubjects()}
```

or alternatively 

```
onClick={this.setBooksSubjects.bind(this)}
```

It's not ideal to re-create these functions on each render, so the alternative would be some form of auto-binding in the class's constructor, all of which re-create these functions once per instance, and require boilerplate. 

I'd love to see the React team add some way of opting in to having a handler `call`ed with the current component set as this.  By ""current component"" I mean the component whose `render` created the element.  I don't know what it should be called, but, for example, if it were called ""ownClick"" it would look like this

```
   <button ownClick={this.foo}>Click me</button>
```

And so when that button is clicked, `foo` would be called, with the object that owns the `render` method which rendered the button set as `this`.
"
facebook/react,2016-05-11 12:37:07,feature,Warn on inline style update with a bad value,"If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example: https://jsfiddle.net/d6me6fca/ )

I suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.
"
facebook/react,2016-05-06 20:34:52,feature,<datalist> support,"Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit. 
https://bugs.webkit.org/show_bug.cgi?id=98934

http://caniuse.com/#search=datalist

Right now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill. 
https://facebook.github.io/react/docs/events.html#form-events
"
facebook/react,2016-04-26 17:00:11,feature,Have React ignore a specific DOM element,"As per my chat [here](https://twitter.com/nickdima/status/723904527083147264) with @gaearon I'm filing an issue to discuss this further.

I would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client.
One specific use case is rendering ad server tags that are kind of a pain in the ars, using things like `document.write`, etc. I render them using `dangerouslySetInnerHTML` but sometimes when React is doing the reconciliation client side they get re-render so they stop executing. Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen.
Any advice?
"
facebook/react,2016-04-21 00:25:26,feature,Add comments/attribute indicating which component was rendered,"As per the discussion today...

Sometimes you are developing on a platform that doesn't have devtools (safari, etc).  The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it.  Without devtools, the output markup is really hard to navigate.  It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output.

These nodes would be rendered only in dev mode or with some flag turned on or something.
"
facebook/react,2016-04-09 10:59:28,feature,Allow specifying multiple fallback values for inline styles (e.g. for vendor prefixing with SSR),"I've been using the ""string"" hack to override CSS values in React components.

For example, if you want to have `display` with different values, you do

```
styleObj.display = '-webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex';
```

I have an npm module for poly-filling my styles in my React components.
https://www.npmjs.com/package/poly-style

All of that worked perfectly in v0.14. No warnings no nothing.
Updated to v15.0 today, and everything is breaking.
a) Normally there are deprecation warnings. I didn't notice any warnings on that change.
b) in the changelog I cannot see anything related to that, to understand what changed.

Am I missing something?
"
facebook/react,2016-04-05 12:26:32,feature,Add support for CSS variables in style attributes,"CSS variables is now supported in Chromium, which we use for rendering. They enable us to write cleaner, more flexible code. Sadly, I cannot seem to use them in React without resorting to various tricks. Ideally, I would like to be able to use them like `<div style={{""--color"": ""hotpink""}} />`, which would make the variable available inside the scope of the div.

I am able to add them using the following syntax `<div style={{[""--color""]: ""hotpink""}} />`, but then they aren't updated if I try assigning a new value—which ruins much of the point of using a variable.

I am able to add and remove them using ReactDOM and `ReactDOM.findDOMNode(this).style.setProperty(""--color"", ""hotpink"")`, but that gets it out of sync with the DOM updates, in addition to not being pretty.

If there are any questions on the usefulness of CSS variables I'll be more than happy to explain.
"
facebook/react,2016-03-14 22:23:07,feature,Support DOM nodes as children,"It would be nice to be able to do the equivalent of `<div>{document.createElement('div')}</div>`. It seems entirely doable now with our new fancy renderer I think? Obviously it wouldn't be supported for SSR though so you would have to provide your own fallback if necessary.
"
facebook/react,2022-04-22 07:15:07,question,Question about React.Fragment and dangerouslySetInnerHTML,"
React version: 17.0.0

React.Fragment Why not  dangerouslySetInnerHTML property
"
facebook/react,2022-03-08 15:06:47,question,"Bug: Data is losing during page refresh in Reactjs-Redux; Tried using 'redux-persist' and localstorage , but not working.","In our project,forms(login,signup,logout,etc..) were built in django and through this we are getting the authorization details and this was stored as redux-data and was used in the rest of the application which is built in react.There was no refresh issue during that time.evenif the store was getting disapper but we are getting it back.Now,we shifted all that we done in Django into react and used the same redux storage method in login,but we are facing the data losage during refresh,store is not getting restore and we are having 403 status for 2 apis for getting the user details.This was not happening in former case.
We used redux-persist package to avoid this data losage.. And also tried using localstorage persisting method(loadState(),saveState()).But,still facing the issue.

store.js
```
import { createStore, applyMiddleware, compose } from 'redux'
import thunk from 'redux-thunk'
import rootReducer from './reducers'
import { persistStore, persistReducer } from 'redux-persist'
import storage from 'redux-persist/lib/storage';
 
const persistConfig = {
key: ""root"",
storage,
}
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose
const persistedReducer = persistReducer(persistConfig,rootReducer)
const store = createStore(persistedReducer,composeEnhancers(applyMiddleware(thunk)))
const Persistor = persistStore(store);
 
export default (store)
export { Persistor }
```

action.js:
```
import axios from 'axios'
import { SET_PROFILE, SET_FEATURE_TOGGLES } from './actionTypes'
import { client_request_data } from '../config';

const redirectToLogin = () => {
  delete axios.defaults.headers.common.Authorization
  if (window.location.href.indexOf('/accounts/') !== -1) {
    window.location.href = '/accounts/login'
  }
}

export const fetchUserProfile = () => dispatch => {
  axios
    .post(`/accounts/user_profile/`,{
      client_request_data: client_request_data
    })
    .then(resp =>
      dispatch({
        type: SET_PROFILE,
        payload: resp.data,
      }),
    )
    .catch(e => {
      // TODO figure out what do do here
      if (e.response?.status === 403) {
        redirectToLogin()
      }
    })
}

export const fetchFeatureToggles = () => dispatch => {
  axios
    .post(`/api/study/v1/feature_toggle/`,{
      client_request_data: client_request_data
    })
    .then(resp =>
      dispatch({
        type: SET_FEATURE_TOGGLES,
        payload: resp.data,
      }),
    )
    .catch(e => {
      // TODO figure out what do do here
      if (e.response?.status === 403) {
        redirectToLogin()
      }
    })
}
```
Reducers:1.featureToggle.js
```
import { SET_FEATURE_TOGGLES } from '../actionTypes'

const intialstate = {}

export default (state = intialstate, action) => {
  switch (action.type) {
    case SET_FEATURE_TOGGLES:
      return action.payload
    default:
      return state
  }
}
```
2.userprofile.js
```
import { SET_PROFILE } from '../actionTypes'

const intialstate = {}

export default (state = {}, action) => {
  switch (action.type) {
    case SET_PROFILE:
      return action.payload
    default:
      return state
  }
}

```
App.js:
```
import React, { useEffect, Suspense } from 'react'
import { connect } from 'react-redux'
import CssBaseline from '@material-ui/core/CssBaseline'
import { ThemeProvider } from '@material-ui/styles'
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'
import { Provider } from 'react-redux'
import { BrowserRouter, Switch, Route } from 'react-router-dom'
import theme from './theme/muiTheme'
import './i18n'
import Home from './screens/Home'
import * as actions from './redux/actions'
import Userservice from './services/UserService'
import { BASE_URL} from './config'
import Login from './Login'
import Signup from './Signup'
import Logout from './Logout'
import ResetPassword from './ResetPassword'
import ResetSuccess from './ResetSuccess'
import store from './redux/store'

const App = props => {
  const {
    userProfile,
    featureToggles,
    fetchUserProfile,
    fetchFeatureToggles,
  } = props
  useEffect(() => {
    fetchUserProfile()
    fetchFeatureToggles()
  })
  return (
        <Suspense fallback={<span></span>}>
          <BrowserRouter>
            <Switch>
            <Route
                exact
                path=""/""
                render={() => {
                    return (
                      userProfile === null || featureToggles === null ? <Login/> : <Home /> 
                    )
                }}
              />
             
            </Switch>
          </BrowserRouter>
        </Suspense>
  )
}

const mapStateToProps = state => ({
  userProfile: state.userProfile,
  featureToggles: state.featureToggles,
})

export default connect(mapStateToProps, actions)(App)
```
index.js:
```
import promiseFinally from 'promise.prototype.finally'
import React, {Suspense} from 'react'
import ReactDOM from 'react-dom'
import './index.css'
import CssBaseline from '@material-ui/core/CssBaseline'
import { ThemeProvider } from '@material-ui/styles'
import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'
import { Provider } from 'react-redux'
import * as serviceWorker from './serviceWorker'
import App from './App'
import theme from './theme/muiTheme'
import store,{Persistor} from './redux/store'
import './i18n';
import Home from './screens/Home'
import Login from './Login'
import Signup from './Signup'
import Logout from './Logout'
import { PersistGate } from 'redux-persist/integration/react'
promiseFinally.shim()

ReactDOM.render(
  <Provider store={store}>
    <PersistGate Loading={null} persistor={Persistor}>
    <MuiThemeProvider theme={theme}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Suspense>
        <App />
        </Suspense>
      </ThemeProvider>
    </MuiThemeProvider>
    </PersistGate>
  </Provider>,
  document.getElementById('root'),
)
serviceWorker.unregister()

```

Also tried with localstorage: localstorage.js(in redux)

```
export const loadState = () => {
    try {
      const serializedState = localStorage.getItem(""state"");
      if (serializedState === null) {
        return undefined;
      }
      return JSON.parse(serializedState);
    } catch (err) {
      return undefined;
    }
  };
  
  export const saveState = (state) => {
    try {
      const serializesState = JSON.stringify(state);
      localStorage.setItem(""state"", serializesState);
    } catch (err) {
      console.log(err);
    }
  };
```
Corresponding store.js:
```
import { createStore, applyMiddleware, compose } from 'redux'
import thunk from 'redux-thunk'
import rootReducer from './reducers'
import { persistStore,persistReducer} from 'redux-persist'
import storage from 'redux-persist/lib/storage';
import { fetchFeatureToggles } from './actions';
import { loadState,saveState } from './localStorage';
import { throttle } from 'lodash';

const persistConfig = {
key: ""root"",
storage,
}
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose
const persistedState = loadState();
const persistedReducer = persistReducer(persistConfig,rootReducer)
const store = createStore(persistedReducer,persistedState,composeEnhancers(applyMiddleware(thunk)))

store.subscribe(throttle(() => {
    saveState(store.getState());
  },1000));
  
  const Persistor = persistStore(store);
  export default store

export {Persistor} 

```"
facebook/react,2021-07-16 04:26:13,question,react developer tools ,I successfully installed the extensions but i am not able to see the the news tabs ( components and react
facebook/react,2021-06-08 19:41:48,question,Question: startTransition behavior,"I'm very sorry that I'm using the issue tracker to ask this question, but I think others might ask the same question after reading https://github.com/reactwg/react-18/discussions/41 (I don't have commenting rights).

```js
function handleInputChange(e) {
  const input = e.target.value

  setInputValue(input)

  startTransition(() => {
    setSearchQuery(input)
  });
}
```

What happens if the user types ""ab""? i.e.:

```js
// pseudocode representing the first event handler triggered by keystroke ""a""
setInputValue(""a"")
startTransition(() => setSearchQuery(""a""))

// pseudocode representing the second event handler triggered by keystroke ""b""
setInputValue(""ab"")
startTransition(() => setSearchQuery(""ab""))
```

From my understanding `setInputValue(""a"")` and `setInputValue(""ab"")` will batch generating a single rerender, the callback `() => setSearchQuery(""a"")` passed to the first `startTransition` will be cancelled, and only the second callback `() => setSearchQuery(""ab"")` passed to the second `startTransition` will be executed. i.e.:

```js
// pseudocode representing the final logic after keystrokes ""a"" and ""b""

setInputValue(""a"") // will batch with `setInputValue(""ab"")`
startTransition(() => setSearchQuery(""a"")) // noop, this callback will be cancelled

setInputValue(""ab"")
startTransition(() => setSearchQuery(""ab""))
```

Am I correct?

I think this question is important because if the first callback passed to `startTransition` really gets cancelled and I try to do more work inside it, I should have in mind that the additional work will not happen.

cc @gaearon @acdlite "
facebook/react,2021-05-19 03:45:49,question,Experimental createRoot method not available in React 17,"I am using react and react-dom v17.0.2 and I was trying to use the unstable_createRoot method to render my app but looks like that method is not even present in react v17.0.2. 

Can someone comment if this is expected or not.

Thanks,
Arpit"
facebook/react,2021-04-05 13:39:08,question,"Bug: strict mode, initial state changes, and useMemo (with dependency) doesn't seem to be recomputed","<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

I ran in to this interesting dynamic that I cannot explain today.

1) The code sets some initial state, which is a random number, and logs this initial value. 
2) It converts the number to a string using `useMemo`, which logs the number it is converting, and is dependant on that number (not the string). And 
3) when the component is mounted, I force a re-render by changing a boolean state once.

The result is that the initial value of the number is changed (and the log is output) so you see the number being set twice to two different values - this only happens in `StrictMode`. It is surprising. Is it expected?

You also see the `useMemo` being computed ONCE - only the first time. So seemingly it does not recompute a new string value.

BUT, the output in the HTML is the correct and shows the stringified value of the _second_ number. 

So what is happening here? Is the console log swallowed? Is `useMemo` behaving correctly, and more importantly, is the `initialValue` of `useState` supposed to change like that?

## Steps To Reproduce

```typescript
export default function App() {
  const [rand] = useState(Math.random());
  const [, setState] = useState(false);

  console.log(`Number: ${rand}`);

  useEffect(() => {
    setState(true);
  }, []);

  const text = useMemo(() => {
    console.log(`Computing text from ${rand}`);
    return rand.toString();
  }, [rand]);

  return (
    <div className=""App"">
      <h1>Rand: {rand}</h1>
      <h1>Text: {text}</h1>
    </div>
  );
}
```

And wrap your app in `StrictMode`

## Link to code example:

https://codesandbox.io/s/strict-mode-random-bug-ml3gv

## The current behavior

initial state computed twice.
usememo seemingly not run twice

## The expected behavior

Initial state computed once?
Or usememo runs twice?
"
facebook/react,2021-03-29 06:44:29,question,Question:  is there any way to retrieve React Devtool performance data?,"Hi guys, I want to get react devtool performance/profiler results, probably a JSON data and send to our local server, I read through the react-devtools-core but unfortunately do to get any clue how to do this ?"
facebook/react,2021-03-03 15:25:10,question,Question about getting the latest state value in the concurrent mode,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.1

## Steps To Reproduce

1. Enable strict mode for checking for possible issues in the future concurrent mode
2. create the below component and run the code
```
import { useCallback, useState } from ""react"";

const Example = ({ onIncrement }) => {
  const [count, setCount] = useState(0);

  const incrementHandler = useCallback(() => {
    onIncrement(count, count + 1);  // Is count guaranteed to be the latest state here due to including count in the useCallback dependency array?
    setCount((count) => count + 1);
  }, [count, onIncrement]);

  return (
    <>
      <span>{count}</span>
      <button onClick={incrementHandler}>increment</button>
    </>
  );
};

const Parent = () => (
  <Example
    onIncrement={(currentCount, incrementedCount) =>
      alert(
        `count before incrementing: ${currentCount}, after increment: ${incrementedCount}`
      )
    }
  />
);

export default Parent;
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

<!-- Link to code example: -->

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
In this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:
```
const incrementHandler = useCallback(() => {
    setCount((count) => {
      onIncrement(count, count + 1);  
      return count + 1
    });
  }, [count, onIncrement]);
```
then the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.
and If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.

you may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.

you may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**

## The expected behavior
Providing a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:
```
const incrementHandler = useCallback(() => {
    let prevCount, nextCount;
    setCount(
      (count) => {
        prevCount = count;
        nextCount = count + 1;
        return nextCount;
      },
      () => onIncrement(prevCount, nextCount)
    );
  }, [onIncrement]);
``` 
In my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented. 

unlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.

**wrong solution:**
```
const [count, setCount, getCount] = useState(0);

  const incrementHandler = useCallback(() => {
    setCount((count) => count + 1);
    const currentCount = getCount();
    const nextCount = currentCount + 1;
    onIncrement(currentCount, nextCount)
  }, [onIncrement]);
```
or providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.

Please tell me if I'm missing something or I've misunderstood things.

If not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.

Thank you!"
facebook/react,2021-02-20 01:05:40,question,Bug: It seems that the default value in functional React component gets updated after render.,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

It seems that the default value in functional React component gets updated after render.

React version: 17.0.1

## Steps To Reproduce

I created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:


```
const MyComponent = () => {

  // Initialise data with a random value:
  const [data, setData] = React.useState(
    () => {
      const data = _.sampleSize(_.range(5), 3)
      // Print data on initialisation:
      console.log('init data in default:', data)
      return data
    }
  )

  React.useEffect(() => {
    // Print data after the component is rendered:
    console.log('init data after render:', data)
  })

  return (
    <div>{data}</div>
  );
};
```

The output in console is:

```
[Log] init data in default: – [0, 3, 1] (3)
[Log] init data after render: – [2, 1, 3] (3)
```

My understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

https://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js

## The current behavior

The output in console before and after render is different.

## The expected behavior

The output in console before and after render should be the same."
facebook/react,2021-01-22 14:56:51,question,Dev tools Chrome Extension only works properly in Incognito window,"Hi folks,
At some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows.  It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app.  For example, I cannot inspect a button component, a container component, an input component, etc, in the UI.

This issue disappears in incognito mode, however, and i can use the extension just fine.

Chrome version: 87.0.4280.141
Extension version: 4.10.1
React version: 16.13.1

I've been unable to find anyone else with this issue.  Please let me know if there is other information I can provide you with.  Thank you."
facebook/react,2020-10-27 23:40:19,question,Question: CM mode and useEffect cleanups,"Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second?

ComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively ""await"" on the (1) to cleanup first."
facebook/react,2020-09-10 07:13:00,question,Some questions about lanes.,"First of all, thank you for reading and patience.

I've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves.

> This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing.

From the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks.

But I couldn't figure out what asynchronous IO blocked？

```js
<A/>
<Suspense>
  <B/>
</Susepsne>
<C/>
```
Based on the above example, before lanes, where is blocked, and where is the problem solved after lanes.

Or do you have a better demo to explain?

For developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.
"
facebook/react,2020-08-03 14:16:34,question,Why does React warn about multiple renderers using the same context provider?,"I am currently developing a web app that uses both [react-pixi](https://github.com/inlet/react-pixi) and [react-babylonjs](https://github.com/brianzinn/react-babylonjs). Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries. 

It displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update.

I want to know if there is any risk in doing this, or is this just a false warning?

React version: 16.13.1

## Steps To Reproduce

1. Using multiple react renderers
2. Using the same context provider between that react renderers

Link to code example: https://codesandbox.io/s/multiple-reconciler-using-same-context-v8kq1?file=/src/App.js

## The current behavior

It will throw a warning message after every state updating:

> Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported. 

But everything works well, both renderers can trigger an update.

## The expected behavior

Don't show any warning."
facebook/react,2020-07-17 19:00:22,question,Showing an Array in string Format in UI,"In JS, Array rendered with ',' in between each element
 e.g. ['Piyush', 'Sinha'] 
// Piyush,Sinha//
but in react Array rendered without ',' in between each element
 e.g. [ 'Piyush', 'Sinha'] 
//PiyushSinha//"
facebook/react,2020-07-08 07:55:22,question,[Micro React Apps] - Need to render another React App into existing React App,"Hi,

I need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my ""App2"" on a remote server. I read ""asset-manifest.json"" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my ""App1"" to load my ""App2"" on runtime. 

But I am not able to trigger ""App2"". How should I triggered App2 component inside App1 component?

My application have lot of other internal dependencies, such redux, redux-thunk etc.

 "
facebook/react,2020-06-20 12:13:21,question,devtool Api request : add api for customize renderer inspect element,"I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool;
I can hightlight element when click element in react dev tool compoent panel use code:
```ts
__REACT_DEVTOOLS_GLOBAL_HOOK__?.reactDevtoolsAgent?._bridge.addListener('highlightNativeElement', (eleInfo: EleInfo) => {
        const { id, rendererID } = eleInfo;
        const renderer = __REACT_DEVTOOLS_GLOBAL_HOOK__?.rendererInterfaces.get(
            rendererID,
        );

        const node_list =
            (renderer.findNativeNodesForFiberID(id) as Sprite[]) || [];

        //... customise render engin hightlight code
    });
```

I want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code
https://github.com/facebook/react/blob/6ba25b96df5d4179bf8aba3c3fe1ace3dce28234/packages/react-devtools-shared/src/devtools/views/hooks.js#L311
but I can't get store object and get enugh infomation send to backend.
maybe dev tool can expose proper api for this function"
facebook/react,2020-05-28 19:31:30,question,Selenium integration,"Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work. 

I want to get reacts props with selenium in order to make easier the debugging of a website. 

I'd be thankful with any kind of help you can give me.

Best regards"
facebook/react,2020-04-24 04:45:53,question,React Hooks will render multiple times after await,"```
const [ html, setHTML ] = useState('');
const [ script, setScript ] = useState('');

const update = (script, html) => {
  setScript(script);
  setHTML(html);
};

update('a', 'b');
```

The above code works fine, React Hooks will render ONCE and combine setScript & setHTML;


```
const [ html, setHTML ] = useState('');
const [ script, setScript ] = useState('');

const update = async (script, html) => {
  await new Promise(resolve => setTimeout(resolve, 10));
  setScript(script);
  setHTML(html);
};

update('a', 'b');
```

The above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML.

I can change to the code to:

```
const [ state, setState ] = useState({
  html: '',
  script: ''
});

const update = async (script, html) => {
  await new Promise(resolve => setTimeout(resolve, 10));
  setState({
    script,
    html
  });
};

update('a', 'b');
```

The above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is."
facebook/react,2020-04-03 13:56:48,question,Extention React non définie sur chrome,"
react Developer Tools 4.6.0
Google chrome Version 80.0.3987.149
L'outil de développement react est inactif sur la console google chrome"
facebook/react,2020-02-18 16:04:52,question,Question: Why not useCallback always return static value without deps?,"```tsx
function useRefCallback<T extends (...args: any) => void>(callback: T) {
  const ref = useRef<T>(callback);
  ref.current = callback;
  return useCallback(function(this: any, ...args: Parameters<T>) {
    return ref.current.apply(this, args);
  } as T, []);
}
```
I think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation."
facebook/react,2020-02-17 02:21:03,question,Question: How to remove dynamic children from Parent State?,"I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list.

**Scenario**
1. The first sibling is created, calls `useContext`, and then pushes something into the list. 
2. The second sibling is then created, using the same `useContext`, and then pushes something into the list. 

**Issue**
The second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_

**Expected**
That each component that is using the same `useContext` will be updated amongst all components that use the same context.

Is this a bug or am I misusing this? Any help or guidance is appreciated 🙇 "
facebook/react,2020-02-06 22:24:40,question,Webpack can't find ReactDOM.createRoot,"Hi,

I'm kinda in doubt if this is an error or is just me doing something wrong.

I am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot.

When I try to run my project I receive the error message from the console:
```
Uncaught TypeError: react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.createRoot is not a function
    at Module../src/client/index.js (main.chunk.js:2437)
    at __webpack_require__ (runtime.bundle.js:786)
    at fn (runtime.bundle.js:151)
    at Object.0 (main.chunk.js:4324)
    at __webpack_require__ (runtime.bundle.js:786)
    at checkDeferredModules (runtime.bundle.js:46)
    at Array.webpackJsonpCallback [as push] (runtime.bundle.js:33)
    at main.chunk.js:1
``` 
This only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly.

Any idea why this is happening?
```
""dependencies"": {
    ""chalk"": ""^3.0.0"",
    ""compression"": ""^1.7.4"",
    ""express"": ""^4.17.1"",
    ""morgan"": ""^1.9.1"",
    ""uuid"": ""^3.4.0""
  },
  ""devDependencies"": {
    ""@babel/cli"": ""^7.8.4"",
    ""@babel/core"": ""^7.8.4"",
    ""@babel/node"": ""^7.8.4"",
    ""@babel/plugin-proposal-class-properties"": ""^7.7.4"",
    ""@babel/plugin-proposal-decorators"": ""^7.7.4"",
    ""@babel/plugin-proposal-export-namespace-from"": ""^7.7.4"",
    ""@babel/plugin-proposal-function-bind"": ""^7.7.4"",
    ""@babel/plugin-proposal-nullish-coalescing-operator"": ""^7.7.4"",
    ""@babel/plugin-proposal-optional-chaining"": ""^7.7.5"",
    ""@babel/plugin-proposal-pipeline-operator"": ""^7.7.7"",
    ""@babel/plugin-proposal-private-methods"": ""^7.7.4"",
    ""@babel/plugin-proposal-throw-expressions"": ""^7.7.4"",
    ""@babel/plugin-syntax-dynamic-import"": ""^7.7.4"",
    ""@babel/preset-env"": ""^7.8.4"",
    ""@babel/preset-react"": ""^7.7.4"",
    ""@babel/preset-typescript"": ""^7.8.3"",
    ""@hot-loader/react-dom"": ""^16.11.0"",
    ""@testing-library/jest-dom"": ""^5.1.1"",
    ""@testing-library/react"": ""^9.4.0"",
    ""autoprefixer"": ""^9.7.4"",
    ""babel-eslint"": ""^11.0.0-beta.2"",
    ""babel-jest"": ""^25.1.0"",
    ""babel-loader"": ""^8.0.6"",
    ""babel-plugin-dynamic-import-node"": ""^2.3.0"",
    ""babel-plugin-styled-components"": ""^1.10.7"",
    ""case-sensitive-paths-webpack-plugin"": ""^2.3.0"",
    ""circular-dependency-plugin"": ""^5.2.0"",
    ""clean-webpack-plugin"": ""^3.0.0"",
    ""connected-react-router"": ""^6.6.1"",
    ""copy-webpack-plugin"": ""^5.1.1"",
    ""core-js"": ""^3.6.2"",
    ""css-hot-loader"": ""^1.4.4"",
    ""css-loader"": ""^3.4.1"",
    ""deep-freeze"": ""^0.0.1"",
    ""eslint"": ""^6.8.0"",
    ""eslint-loader"": ""^3.0.3"",
    ""eslint-plugin-babel"": ""^5.3.0"",
    ""eslint-plugin-import"": ""^2.20.1"",
    ""eslint-plugin-jsx-a11y"": ""^6.2.3"",
    ""eslint-plugin-ramda"": ""^2.5.1"",
    ""eslint-plugin-react"": ""^7.18.3"",
    ""eslint-plugin-react-hooks"": ""^2.3.0"",
    ""eslint-plugin-redux-saga"": ""^1.1.3"",
    ""eslint-watch"": ""^6.0.1"",
    ""file-loader"": ""^5.0.2"",
    ""hard-source-webpack-plugin"": ""^0.13.1"",
    ""history"": ""^4.10.1"",
    ""html-webpack-plugin"": ""^3.2.0"",
    ""immer"": ""^5.3.4"",
    ""jest"": ""^25.1.0"",
    ""jest-styled-components"": ""^7.0.0"",
    ""lodash"": ""^4.17.15"",
    ""mini-css-extract-plugin"": ""^0.9.0"",
    ""moment"": ""^2.24.0"",
    ""nock"": ""^11.7.1"",
    ""normalizr"": ""^3.5.0"",
    ""npm-run-all"": ""^4.1.5"",
    ""open"": ""^7.0.2"",
    ""optimize-css-assets-webpack-plugin"": ""^5.0.3"",
    ""pm2"": ""^4.2.3"",
    ""postcss-flexbugs-fixes"": ""^4.2.0"",
    ""postcss-loader"": ""^3.0.0"",
    ""prop-types"": ""^15.7.2"",
    ""ramda"": ""^0.27.0"",
    ""react"": ""^0.0.0-experimental-241c4467e"",
    ""react-dom"": ""^0.0.0-experimental-241c4467e"",
    ""react-hooks-testing-library"": ""^0.6.0"",
    ""react-hot-loader"": ""^4.12.19"",
    ""react-is"": ""^16.12.0"",
    ""react-redux"": ""^7.1.3"",
    ""react-router"": ""^5.1.2"",
    ""react-router-dom"": ""^5.1.2"",
    ""react-test-renderer"": ""^16.12.0"",
    ""redux"": ""^4.0.5"",
    ""redux-actions"": ""^2.6.5"",
    ""redux-devtools-extension"": ""^2.13.8"",
    ""redux-logger"": ""^3.0.6"",
    ""redux-saga"": ""^1.1.3"",
    ""redux-saga-test-plan"": ""^4.0.0-rc.3"",
    ""regenerator-runtime"": ""^0.13.3"",
    ""reselect"": ""^4.0.0"",
    ""source-map-loader"": ""^0.2.4"",
    ""style-loader"": ""^1.1.3"",
    ""styled-components"": ""^5.0.1"",
    ""stylelint"": ""^13.0.0"",
    ""stylelint-bare-webpack-plugin"": ""^2.0.0"",
    ""stylelint-config-recommended"": ""^3.0.0"",
    ""stylelint-config-standard"": ""^19.0.0"",
    ""stylelint-config-styled-components"": ""^0.1.1"",
    ""stylelint-custom-processor-loader"": ""^0.6.0"",
    ""stylelint-order"": ""^4.0.0"",
    ""stylelint-processor-styled-components"": ""^1.9.0"",
    ""stylelint-selector-bem-pattern"": ""^2.1.0"",
    ""thread-loader"": ""^2.1.3"",
    ""typescript"": ""^3.7.5"",
    ""url-loader"": ""^3.0.0"",
    ""webpack"": ""^4.41.4"",
    ""webpack-dev-middleware"": ""^3.7.2"",
    ""webpack-hot-middleware"": ""^2.25.0"",
    ""webpack-manifest-plugin"": ""^2.2.0"",
    ""webpack-merge"": ""^4.2.2"",
    ""webpack-pwa-manifest"": ""^4.1.1"",
    ""workbox-webpack-plugin"": ""^5.0.0""
  }
```"
facebook/react,2020-02-04 15:46:04,question,Bug: Nested setState and unstable_batchedUpdates (are they ignored?),"Nested setState and unstable_batchedUpdates (are them ignored?)

React version: 16.12

## Steps To Reproduce
https://codesandbox.io/s/batchedupdates-uselayouteffect-evj8s

open profile after click, you will see 3 commit.

it seems that even if we use unstable_batchedUpdates, nested setStates called on
didUpdate/layouteffect do not get batched.
"
facebook/react,2020-02-03 14:29:36,question,"While using useRef , some data has been updated by context value from reducers, when the context value was updated from some other user event, variable used with useRef also updated, then how to use instance variables in hooks?","const CreateNotificationBase = (props) => {
const [state, dispatch] = useContext(Store);
 const draftData = useRef({});
useEffect(() => {
        if (state.notificationDetails.draftId) {
            draftData.current = state.notificationDetails;
        }
    }, []);
useEffect(() => {
debugger
},[draftData.current])
}

when value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve."
facebook/react,2020-01-30 02:37:25,question,Question:  Just for my app test. Thanks.,"🚨 This issue tracker is not for questions. 🚨

As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.

## Coding Questions

If you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.

https://stackoverflow.com/questions/tagged/react

## Talk to other React developers

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.

https://reactjs.org/community/support.html#popular-discussion-forums

## Proposals

If you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.

https://github.com/reactjs/rfcs
"
facebook/react,2020-01-19 01:43:43,question,Question: React apollo hooks fails after adding react-native to monorepo,"I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:
[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/KbvYG.png

I am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.

Is there any way how can I solve it?

Apollo controller

    import { useQuery } from ""@apollo/react-hooks"";
    import gql from ""graphql-tag"";
    
    export const useHelloQuery = () => useQuery(
         gql`
             {
                 hello
             }
         `
    )


React component:

    function Test() {
         const data = useHelloQuery();
    
         return (
              <Text>awesoe</Text>
         );
    }
    

before adding react-native it was exactly same"
facebook/react,2020-01-16 10:33:57,question,Question: react lib context overrides app context,"Hi, I believe that this can potentially be an issue, though I'm not sure.

I was wondering about good patterns concerning the react context.

Let's get a public library, for example `react-intl` that exposes a Provider (IntlProvider).
Let's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.
Now let's imagine I create a web app and use both `barLib` and `react-intl`.

I don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib.
But the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b

This kinda breaks the isolation of libs IMO.

I see several solutions :
- Don't use an other lib context in the `barLib` (pretty extreme)
- Check that there is not already an intl context in the `barLib`, if so merge the context values ?

I'm not convinced with either solutions, what do you guys think about it ?"
facebook/react,2020-01-15 03:23:40,question,Question: why cann't I set echarts instance using useState?,"

## Coding Questions
i try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined
```
const [instance, setInstance] = useState<ECharts | undefined>(undefined);

const chartInstance = echarts.init(root.current);
    setInstance(prev => {
        console.log('prev instance', prev); // first time: undefined, then Echarts instance
        return prev || chartInstance;
    });
    console.log('instance: ', instance, chartInstance); // instance is always undefined
```


"
facebook/react,2020-01-13 06:51:35,question,help~When I use React.createElement directly and How to pack the component?,"hello all.

I was met a problem when I published a react component, I need to help and discuss with you all 
I am going to write a component to load `React Component from CDN` and make it like a wrapper component.

```jsx
import React, { Component } from 'react';
import scriptjs from 'scriptjs';

const DEV_SCRIPT =
  'https://dev/cdn/resource/phoenix-header.js';
const PROD_SCRIPT =
  'https://cdn/resource/phoenix-header.js';

class PhoenixHeaderWrapper extends Component {
  constructor(props) {
    super(props);
    this.type = null;
    this.scriptUrl =
      props.scriptUrl || (props.env !== 'PROD' ? DEV_SCRIPT : PROD_SCRIPT);
    this.state = {
      cmp: null,
    };
  }

  componentDidMount() {
    scriptjs(this.scriptUrl, () => {
      this.type = window.PhoenixHeader;
      this.createOrUpdateComponent();
    });
  }

  createOrUpdateComponent() {
    const { scriptUrl, ...otherProps } = this.props;
    if (!this.type) {
      console.error('load component failed');
      return;
    }
    const cmp = React.createElement(this.type, otherProps || {});  // this is point
    this.setState({ cmp });
  }

  render() {
    const { cmp } = this.state;
    return cmp;
  }
}

PhoenixHeaderWrapper.defaultProps = {
  scriptUrl: '',
  env: 'PROD',
};

export default PhoenixHeaderWrapper;

```

and then, I do it just like do a normal react component that I was set the webpack config like below:

```js
// PhoenixHeader
  output: {
    publicPath: './',
    filename: 'phoenix-header.js',
    path: paths.appBuild,
    library: 'PhoenixHeader',
    libraryTarget: 'commonjs2',
    libraryExport: 'default',
  },
  mode: 'production',
  externals: {
    react: {
      commonjs: 'react',
      commonjs2: 'react',
      amd: 'react',
      root: 'React',
    },
    ['react-dom']: {
      commonjs: 'react-dom',
      commonjs2: 'react-dom',
      amd: 'react-dom',
      root: 'ReactDom',
    },
  },
```

and then, I run the `npm run build && npm publish` to publish it.

In my own object which use the PhoenixHeader component as a npm package. 

```jsx
// app.jsx
import React from 'react';
import PhoenixHeader from 'phoenix-header';
import './App.css';

function App() {
  return (
    <div className=""App"">
      <PhoenixHeader />
      <header className=""App-header"">
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className=""App-link""
          href=""https://reactjs.org""
          target=""_blank""
          rel=""noopener noreferrer""
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;

```
after `npm start`, it show me a error:
![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)

**That it is my confusion is, why `createElement` not in this scope.**

so I try to make react set into global:
```js
window.React = React;
```

Yes, it's work for me.

**But someone would like to tell me why need to make React set into global?**

**And am I need to build this wrapper component which do not external the react when I was build?**

let's discuss or give me more suggest about this wrapper component please  🙏"
facebook/react,2020-01-03 21:21:32,question,Rendering React component on server to take a screenshot of it,"My React application has a list of to do lists like this:

<img width=""1082"" alt=""figma_canvases"" src=""https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png"">

> Replace the Figma canvas preview images with todo lists above.

In the list of todo lists, I'd like to include a preview of each list as well as its name.

Here's what I thought of to achieve this:
- Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.
- Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page

However, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work?

I've looked at `repng` [1] so far but it hasn't worked for the components I tested it with.

[1] https://github.com/jxnblk/repng"
facebook/react,2019-12-31 02:08:08,question,I can't get the latest status value in the initialization method,"I try to get the latest state value in the initialization method, but the result is not satisfactory。
All this happens in function components。

1.react version is 16.12.0；
2.react-dom version is 16.12.0；

this is my demo code :

```
import React,{useState,useEffect} from 'react';

const App=()=>{
	/*button click*/
	const btnClick = ()=>{
		console.log(""initButton getting state is====>"",nowState); //can't get now state ,all is init value
	}
	/*init a button*/ 
	const initTitle = ()=>{
		return (
			<button onClick={btnClick}>click</button>
		)
	}
	const [title, settitle] = useState();

	/*now state*/
	const [nowState, setNowState] = useState(0);
	console.log(""now state is====>"",nowState);

	useEffect(()=>{
		settitle(initTitle());
	},[])

	return (
		<>
			{title}
			<button onClick={()=>setNowState(nowState + 1)}>change now state</button>
		</>
	);
}

export default App;
```
"
facebook/react,2019-12-26 15:11:03,question,[TypeScript]Is there any way to define the state variables when using functional component? ,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

If there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
facebook/react,2019-12-24 07:54:38,question,getDerivedStateFromProps is executed after setState #13015,"Ideally getDerivedStateFromProps  should not be called due to current component's setState. But it is behaving so. Can someone explain?

Couldn't find solution in [#13015](https://github.com/facebook/react/issues/13015)"
facebook/react,2019-12-23 08:43:04,question,Why only one component can be render at root div?,"  I called two render methods to same root div .
```
RenderDOM.render( < Navigation /> ,document.getElementById(' root ')); 
RenderDOM.render( < App /> ,document.getElementById(' root '));
```
And what i get rendered on my screen is only a  App component.
Just want to know that the one render method override the previous  render method?


"
facebook/react,2019-12-12 09:34:37,question,Bug: React table - Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Hello,
I am new in React and I am trying to create a simple react table to display data from db with login for user authentication. 
Until I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls. 

First, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Edit: login, password: admin, admin

https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark
https://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark
[![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)
![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

nodejs version v8.10.0
npm version 6.13.3
ubuntu/chrome

Please give me any advice. Thank you in advance :) 
"
facebook/react,2019-11-26 19:15:10,question,How do suspense and subscriptions interact?,"**Do you want to request a *feature* or report a *bug*?**
Ask a question

**What is the current behavior?**
With `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:

1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`
2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. 
3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, ""I haven't asked for this data yet""
4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.

At no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.

Throwing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.

The only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the ""maybe not ready the first time"" case.

Note: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon "
facebook/react,2019-11-20 16:02:31,question,Why include refs as a feature? -- seems broken and unnecessary,"
Refs never seem to work, is this a broken feature?

Why not remove them and just let people use 
document.querySelector('#id').action like normal people.

also, what does this mean? 

 Function components cannot have refs. Did you mean to use React.forwardRef()?"
facebook/react,2019-11-01 09:37:27,question,DevTools component filter does not work with location,"**Do you want to request a *feature* or report a *bug*?**
Report a bug.

**What is the current behavior?**
In DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)

**What is the expected behavior?**
At least some components be filtered out.
It would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React DevTools 4.2.0 on Firefox 69.0.3."
facebook/react,2019-10-30 09:25:24,question,Why is useEffect hook not activating when a component is reloaded after previously throwing an error?,"I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:

**Container**
``` typescript
import React, { useEffect } from 'react';

import { connect } from 'react-redux';
import Grid from '@material-ui/core/Grid';
import { GridSpacing } from '@material-ui/core/Grid';

import Course from '../components/Course/Course';

import { courseModels } from '../redux/features/course';
import { courseSelectors } from '../redux/features/course';
import { fetchCoursesAsync } from '../redux/features/course/actions';
import { RootState } from 'ReduxTypes';

type ErrorReport = { hasError: boolean; error?: Error };
type StateProps = {
  isLoading: boolean;
  courses: courseModels.Course[];
  error: ErrorReport;
};

/**
 * Redux dispatch and state mappings
 */
const dispatchProps = {
  fetchCourses: fetchCoursesAsync.request,
};

const mapStateToProps = (state: RootState): StateProps => ({
  isLoading: state.courses.isLoadingCourses,
  courses: courseSelectors.getReduxCourses(state.courses),
  error: courseSelectors.getReduxCoursesError(state.courses),
});

/**
 * Component property type definitions
 */
type Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;

/**
 * CourseList component
 */
const CourseList = ({
  courses = [],
  error,
  fetchCourses,
  isLoading,
}: Propas): JSX.Element => {
  // fetch course action on mount
  useEffect(() => {
    console.log('COURSELIST FETCHING COURSES');
    fetchCourses();
  }, [fetchCourses]);

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (error && error.hasError && error.error) {
    throw error.error;
    // if throw an error then encapsulating error boundary catches and displays.
    // However when the container is loaded again via clicking on a Navbar link the useEffect
    // action does not trigger. 
    
    // Alternatively, if the error is rendered inside the container then the useEffect hook is 
    // still activated if the container is loaded again (e.g. via clicking on a Navbar link).
    // return <p>{JSON.stringify(error.error, null, 2)}</p>;
  }

  return (
    <div style={{ marginTop: 20, padding: 30 }}>
      {
        <Grid container spacing={2 as GridSpacing} justify=""center"">
          {courses.map(element => (
            <Grid item key={element.courseID}>
              <Course course={element} />
            </Grid>
          ))}
        </Grid>
      }
    </div>
  );
};

/**
 * Exports
 */
export default connect(
  mapStateToProps,
  dispatchProps,
)(CourseList);
```

If I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect
action does not trigger. Subsequently, the fetchCourses action is not dispatched.

Why is the _useEffect_ hook not triggered on second load after it previously threw an error?

My ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?

What is best practice for resetting a component that threw an error for surrounding ErrorBoundary?"
facebook/react,2019-10-28 11:40:50,question,Utilize Suspense to express app init loader,"With Concurrent mode getting finalized, I went to try to solve an old problem I have.

The app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.

I've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i

The first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.

The last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here."
facebook/react,2019-10-15 11:35:15,question,"Weird behavior with functional components and useState, A bug or ""Another rule!""","<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
```React : '16.9.0'```

sample code 
```javascript
import React from ""react"";
import ReactDOM from ""react-dom"";

function OptionOne(){
  return <div>Blue pill</div>
}

const OptionTwo = React.memo(function OptionTwo(){
  return <div>Red pill</div>
});


function App() {
  const [ Option, setOption ] = React.useState(null);

  return (
    <div>
      <div>
        <button onClick={e=>setOption(OptionOne)}>Option one</button>
        <button onClick={e=>setOption(OptionTwo)}>Option two</button>
      </div>
      { Option && <Option/>}
    </div>
  );
}

const rootElement = document.getElementById(""root"");
ReactDOM.render(<App />, rootElement);
```
Well the expected behavior was Option one wasn't suppose to throw an error;
setState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.
So is the useState hook working like its suppose to ""A rule not to pass a pure functional component as a value to the setValue of the useState hook"" or a bug? 
"
facebook/react,2019-10-09 12:58:43,question,"i was trying to pass through Hook effect, and the codes used are declared no where. like ChatApi ","```js
import React, { useState, useEffect } from 'react';

function FriendStatus(props) {
  const [isOnline, setIsOnline] = useState(null);

  function handleStatusChange(status) {
    setIsOnline(status.isOnline);
  }

  useEffect(() => {
    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);

    return () => {
      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
    };
  });

  if (isOnline === null) {
    return 'Loading...';
  }
  return isOnline ? 'Online' : 'Offline';
}
```"
facebook/react,2019-09-26 06:36:13,question,"Why does parent's componentDidMount gets called first, then child's?","I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's.

However, in this example: https://codesandbox.io/s/tender-jones-gpkz3

First parent's `componentDidMount` is called, then Child's (check the logs).

This happens _after_ I use this in child:

```
export default compose(
  withStyles(styles),
  withWidth()
)(Child);

```

Does anyone have explanation why this happens?"
facebook/react,2019-09-16 20:05:17,question,Read latest state value in event handler,"I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.

Imagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:

    onClick(){
    
      let data = this.state.data;
      API.makeRequest(""URL"", data);
    
    }

[Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).
However he says this applies to react 16.

Otherwise he suggests to use functional `setState` to get current state.

I have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:

 

    onClick(){
        
       this.setState(ps=>{ 
            // using this form only to read current state in event handler which works for 16 and onwards versions probably
            // but this breaks purity of this function
            API.makeRequest(""URL"", ps.data);
            return {};
       })
        
    }

but then I would violate that the function passed to functional `setState` must be pure.

Is there a solution to the question I asked?

  [1]: https://stackoverflow.com/a/43440790/3963067"
facebook/react,2019-09-10 17:06:02,question,DevTools: Component tree navigation,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Where is no way to collapse/expand component tree or it subtrees. 

If I pick element with ""Select element"" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels. 

Maybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand. 

![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)

![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)

Also I guess it maybe good place to add https://github.com/facebook/react/issues/16463
"
facebook/react,2019-09-04 20:55:04,question,There is no 'rendered by' section in my extension,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
facebook/react,2019-09-03 19:15:32,question,React devtools always launches in Chrome,"Hi.

I have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.

How do I change the default browser for devtools to Firefox?"
facebook/react,2019-09-02 13:14:47,question,Limitations of context API compared to legacy implementation,"This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.

I have a fairly ""edgy"" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).

Example:
```jsx
<Accordion> <!-- provided by host app -->
    <!-- provided by separate plugin -->
    <AccordionItem label=""item 1"">Content</AccordionItem>
    //...
</Accordion>
```

Thus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.

This worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.

As stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.
"
facebook/react,2019-08-29 16:00:22,question,Error message when calling work.commit in commit phase,"This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.

**Do you want to request a *feature* or report a *bug*?**

error message of `batch.commit()` is confusing

**What is the current behavior?**

I was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`

```js
function App() {
  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
    </div>
  );
}

const rootElement = document.getElementById(""root"");
const root = ReactDOM.unstable_createRoot(rootElement);

root.render(<App />).then(() => {
  const batch = root.createBatch();

  batch.render(<App />);
  // bad
  batch.commit();
  setTimeout(() => {
    // good
    //batch.commit()
  }, 0);
  batch.then(() => {
    // good
    //batch.commit();
  });
});

```

Three things I noticed:
1. seems like I need to call batch.commit after the batch is complete. Changing it to 
```
batch.then(() => {
  // good
  batch.commit();
});
```
got rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.

2. ""lifecycle"" should be replaced with something different before these APIs get stable since we try to get away from this mental model. 

For example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.

3. Not all lifecycles are ""during rendering"" as far as I know. `componentDidUpdate` is called during commit.


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/dreamy-wood-dvzrp

**What is the expected behavior?**

I'm basically asking when it's safe to call `batch.commit`: 
* [ ] during render phase
* [ ] during commit phase 
* [ ] outside of these phases e.g. in some `onComplete` callback 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

`react(-dom)@16.9.0`
"
facebook/react,2019-08-26 05:50:40,question,Devtools V4: Breadcrumbs are removed?,"**Request for feature**
The older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?
"
facebook/react,2019-08-16 13:07:52,question,Why does DevTool Chrome Extension need access to history?,"I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history. 

I couldn't find any explanations or reference in the changelog, so I opened this issue."
facebook/react,2019-06-16 12:13:30,question,Suspense + Concurrent Mode immediately shows fallback when updated from onChange,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Reporting a bug, or at least trying to understand some spooky behavior 👻

**What is the current behavior?**

I have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything.  The cache key is based on some component state (managed with the useState hook). This component is wrapped with `<Suspense>` and rendered in a React root with concurrent mode enabled. 

```javascript
function MyApp(){
    let [text, setText] = React.useState('stuff')
    return <div>
        Data: {readCacheSuspense(text)}
        <button onClick={e => setText('B-A-N-A-N-A-S')}>Update text from button</button>
        <input type=""text"" value={text} onChange={e => setText(e.target.value)} />
    </div>
}

ReactDOM.unstable_createRoot(document.getElementById('root')).render(<React.Suspense fallback={<div>cause i ain't no fall-a-back div</div>}>
    <MyApp />
</React.Suspense>)
```

The component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string ""asdf"" when clicked. 

Clicking the button does what I would expect— the page doesn't respond for a fraction of a second (while the data is being ""fetched"") and then updates with a view of the loaded data. 

**Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill. 

Rather than directly calling `setText` within the `onChange` handler— if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback). 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

https://codesandbox.io/s/competent-goldwasser-yhmxo

**What is the expected behavior?**

I would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`. 

I would expect that the fallback UI doesn't show up until its max duration is met.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14."
facebook/react,2019-05-11 10:23:31,question,[eslint-plugin-react-hooks]: Can't call hooks on component returned from function,"Wrapping a component in a function, returning the component.


tl;dr
```javascript
export function Home() {
    return function() {
        const [ items, setItems ] = useState([])
        return <div>nothing</div>
    } 
}

const root = document.getElementById('root')
ReactDOM.render(React.createElement(Home()), root)
```

Results in the following error:

```
React Hook ""useState"" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function
```

However this works:

```javascript
export function Home() {
        const [ items, setItems ] = useState('')
        return <div>nothing</div>
}

const root = document.getElementById('root')
ReactDOM.render(React.createElement(Home), root)
```

"
facebook/react,2019-04-29 05:31:03,question,useEffect for synchronizing state and props,"Hi. I have a recurring scenario that I’ve been struggling with since the good old days of `componentWillReceiveProps`, and now I’ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.

### Problem description - starting point

I have a list of items. Every item has an Edit button next to it. Clicking it opens an “Editor”, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The “parent” component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on “Edit” for a specific item would set the `itemUnderEdit` to the clicked item.

![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)

Here is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy

### Solution 1

Make the “Editor” component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard “keep your state close to where it is used” advice, which also seems reasonable, since I don’t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.

### Solution 2

Make the “Editor” component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the “React” way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful “blackbox”-component that tracks its own state seems reasonable.

In order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:
```
const [name, setName] = useState(props.item.name);
const [description, setDescription] = useState(props.item.description);
```

Moreover, this solution is buggy from the start, since clicking on Edit for a different item doesn’t “re-sync” the props with the state - it only works if I close the Editor and then reopen it:

![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)

Which brings us to Solution 3.

### Solution 3

This one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).
The “old” ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the “dependency”, since I want to run it when the item changes.

```
useEffect(() => {
  if (props.item.name !== name) {
    setName(props.item.name);
  }
  if (props.item.description !== description) {
    setDescription(props.item.description);
  }
}, [props.item]);
```

This seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn’t be able to change anything in the inputs, so how come I get this warning?

### Summary

This is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it’s difficult to know how to implement correctly and safely in a consistent way*.

Lifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a “temporary” solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.

The second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug? "
facebook/react,2019-04-26 09:10:44,question,`static getDerivedStateFromProps()` does not works same as componentWillReceiveProps  ,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
   bug
**What is the current behavior?**
 `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16


Hi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`

below is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work 

how can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)

[jsfiddle working example ](https://jsfiddle.net/munsp36f/)
requirement:

  On click of the button show `Notificationcard`
  On click on close hide `Notificationcard`

```jsx
class Notification extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: true
    };
  }

  componentWillReceiveProps(props) {
    this.setState({ open: props.show });
    // setTimeout(this.handleClick.bind(this), 8000);
  }

  handleClick() {
    this.setState({ open: false });
  }

  componentDidMount() {
    //setTimeout(this.handleClick.bind(this), 8000);
  }

  render() {
    if (!this.state.open) {
      return null;
    }

    return (
      <div>
        <br />
        <div>Item saved successfully</div>
        <div className=""cls--btn"" onClick={() => this.handleClick()}>
          &#10006;
        </div>
      </div>
    );
  }
}

class Test extends React.Component {
  handleClick() {
    this.setState({ show: true });
  }

  render() {
    return (
      <div>
        <button onClick={this.handleClick.bind(this)}>click</button>
        <Notification show={true} />
      </div>
    );
  }
}

ReactDOM.render(<Test name=""World"" />, document.getElementById(""container""));
```"
facebook/react,2019-04-25 05:38:14,question,Declarative vs. imperative coding style using Hooks,"_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._

Consider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.

Notifying the user can be done imperatively:

```js
function Component(props) {
  const [ data, setData ] = useState(null);

  useApi(""/api/data"")
    .then(setData)
    .then(props.onFetched);

  return dataToElements(data);
}
```

or declaratively using an effect hook:

```js
function Component(props) {
  const [ data, setData ] = useState(null);

  useApi(""/api/data"")
    .then(setData);

  useEffect(() => {
    if (data) {
      props.onFetched();
    }
  }, [ data ]);

  return dataToElements(data);
}
```

React seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.

I would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better. "
facebook/react,2019-04-15 06:29:03,question,How to test multiple state changes with act?,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
With the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission:

```
const [isSubmitting, setIsSubmitting] = useState(false);
const handleSubmit = async () => {
  setIsSubmitting(true);
  await fetcher();
  setIsSubmitting(false);
};

```
then I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called.

Due to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible?

Previously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case.

I _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit.

```
it('displays indicator when form is submitting', async () => {
  ReactTestUtils.Simulate.submit(form());
  await act(async () => {
    expect(container.querySelector('.submittingIndicator')).not.toBeNull();
  });
});
```

I've provided this test in a repo together with a couple of other tests which complete the feature - see the link below.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://github.com/dirv/react-act-toggle-state

**What is the expected behavior?**
There's a way for me to test this which doesn't feel like a hack.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.9.0-alpha.0"
facebook/react,2019-04-12 02:57:14,question,"[Question] about ""._owner.alternate""","It seems that in react@16 every React element children contains cyclic property `._owner.alternate.alternate.alternate.alternate`....

![image](https://user-images.githubusercontent.com/19988985/56009001-c2c41100-5d10-11e9-839f-b4a4a608cf86.png)

So it is easy to cause ""Maximum call stack exceeded"" error when developer compares `props.children` in deep way(like [deep-equal](https://www.npmjs.com/package/deep-equal)).

This caused bugs for community libraries like [react-helmet](https://github.com/nfl/react-helmet): 
https://github.com/nfl/react-helmet/issues/441

I am extremely curious about:
Why React has `_owner.alternate`, and what it stands for?
As it is named as “_owner”, could it be better if we make “owner” not enumerable?

I tried to search source code and but still can’t find any clue.

Thanks in advance."
facebook/react,2019-04-09 22:45:48,question,useState causing children to re-mount?,"*bug*

**What is the current behavior?**

I have a hook that is supposed to call a callback after a `setTimeout`. When I render a list of children with this hook, the callback behaves differently when its in a function component with `useState` than it does if its in a class component.

To see this in action, checkout the codesandbox below. The demo should show children components being added to the page and then after 2 seconds the child is mounted, it should be removed. Both the examples use the same child components, only difference is the parent component being a class vs functional component.
[CodeSandbox](https://codesandbox.io/s/01yo61v6m0)

**What is the expected behavior?**

The function component should behave like the class component.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React v16.8.6
Latest Chrome

Unsure if this worked with previous versions of hooks.
"
facebook/react,2019-04-04 22:54:37,question,onAnimationEnd/onTransitionEnd Issues,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**

### onAnimationEnd creates unexpected behavior

In the following example, I am creating a simple notification component from an array. Each element in the array is used to generate a html element with a class that has a css animation on it. The generated div has an ""onAnimationEnd"" binding which will remove them from the array of notifications. The basic idea is that the notification will fade away (using a CSS animation) and then be removed from the array, or alternatively, I am also allowing the user to manually click on the notification element to remove it.

The interesting bug is as follows. If you add two notifications, the first one will trigger its onAnimationEnd and remove itself. The remaining notification will suddenly jump to the end of its css animation and never trigger its own onAnimationEnd. 

Even more curiously if you add four notifications, exactly two of them will have the above bug, while the other two function properly. In fact exactly half of the added elements will trigger onAnimationEnd properly, while the other half will not.

The onClick functionality to remove the notifications from the array does NOT cause any unexpected behavior, and thus I am forced to conclude that the fault lies with onAnimationEnd, since they both run the exact same function.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codepen.io/msorrentino/pen/xeVrwz

Click the ""add notification"" button. Then press it again before the first element has faded (7 seconds) . You will notice that the second notification element gets ""fast forwarded"" to the end of its animation when the first notification is removed by its onAnimationEnd trigger. The second notification will then be stuck there, never triggering its own onAnimationEnd.

**What is the expected behavior?**

onAnimationEnd should trigger for each element in the loop properly.


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Current version of 16.8.6 displays this behavior.
"
facebook/react,2019-04-03 07:01:40,question,UseEffect how to solve conditional paging list,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
 bug
**What is the current behavior?**
UseEffect how to solve conditional paging list:
    1. Reset the page number to 1 when the condition changes
![image](https://user-images.githubusercontent.com/26135370/55459099-4c912180-5621-11e9-827c-1760fec8aa6b.png)
    2. Request to return the current page and keep the current state
![image](https://user-images.githubusercontent.com/26135370/55459127-5ca90100-5621-11e9-97a4-ba5ea642900f.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
Properly handle paging and conditions
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8    Previously treated in class form"
facebook/react,2019-03-29 11:03:43,question,Mimic componentDidMount but with hooks,"We are trying to use Hooks and we want to mimic componentDidMount but our eslint is responding with ""React Hook React.useEffect has a missing dependency: '_checkUser'. Either include it or remove the dependency array  react-hooks/exhaustive-deps""

If we add checkUser to the dependency in the useEffect we get: ""The '_checkUser' function makes the dependencies of useEffect Hook change on every render. Move it inside the useEffect callback. Alternatively, wrap the '_checkUser' definition into its own useCallback() Hook  react-hooks/exhaustive-deps"".

If we change the _checkUser to use useCallback eslint is responding with: ""React Hook React.useCallback has a missing dependency: '_handleUserState'. Either include it or remove the dependency array  react-hooks/exhaustive-deps"".

What is the correct way to solve this? Or should we ignore the warnings?

```javascript
function _handleUserState(respons) {
      // Some code
}

function _checkUser() {
       const response = someExternalFunction();
       _handleUserState(response);
}

React.useEffect(
        () => {
            _checkUser();
        },
        [] // Run once
);
```
"
facebook/react,2019-03-16 15:30:22,question,Why function as child is not considered as children?,"After digging deeper with [this question](https://stackoverflow.com/questions/52553580/react-children-with-non-element-children), I have found `function as a child` is not being considered as **children**.

Take this example:
```
class CountExpression extends React.Component {
  render() {
    const children = React.Children.toArray(this.props.children)
    console.log(children)
    return <p>{React.Children.count(children)}</p>
  }
}
<CountExpression>
   {'one'}
   {'two'}
   { () => <p>Still, this will be ignored as child. Why?</p>}
   <p>This will be included in array - that's fine</p>
</CountExpression>
```

So, I would like know why is it so? Is it a bug or an expected behavior?"
facebook/react,2019-03-12 16:51:41,question,× Maximum update depth exceeded in controled way,"**Do you want to request a *feature* or report a *bug*?**
- maybe bug?

**What is the current behavior?**

My case is that I want to update state n times by adding different types of fields to the state and then render them. 
Every updating of dom(adding new field) I have to check whether I should do something more by checking the hight of added elements, for example, add a break between elements. 
Fields are represented by the tree structure of data, so I created the class which helps me with going through the tree of fields and I keep it in the class property.

I know how many times I have to modify the DOM so It will be a fully controlled way of state update and it will finish after all fields are added to DOM but before I render all fields I am getting the error ""Maximum update depth exceeded"".

Do you know How I can handle with such a problem? 
I found a solution by adding setTimeout on the way but I am not sure that is the clean solution?(commented code)
Is it ok that I keep in component class property more complex class to manage structure of data?

I am providing a simple example in codepage which shows the problem and throw the error.

https://codesandbox.io/s/93w2lp37xw
"
facebook/react,2019-03-05 16:49:38,question,Should setting state inside discrete events cause cleanup to run?,"This bug is pretty confusing:

https://twitter.com/kentcdodds/status/1102659818660102145

I think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`.

This reminds me of the issue described in https://github.com/facebook/react/issues/14750#issuecomment-460409609, or at least a part of it:

>In fact, this problem exists even for regular React keystrokes (and other “discrete” events). The solution to that would be to flush passive effects before we get a discrete event.

But here, it seems like this wouldn’t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.)

So this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?"
facebook/react,2019-02-22 10:52:29,question,useLayoutEffect in ssr,"Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?

https://codesandbox.io/s/oo47nj9mk9

_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_"
facebook/react,2019-02-16 23:32:23,question,Hooks: useState one-off callbacks,"**Do you want to request a *feature* or report a *bug*?**
Question / feature

I've been trying to handle a case where I need to execute a piece of code right after the state is set at a particular place in the code. I do understand I'm supposed to use `useEffect` to respond to changes in state, like so:

```javascript
const [val, setVal] = useState(null);
useEffect(() => { /* handle changes to val here */ }, [val])
```

But the problem is, it will run on all changes made to `val` anywhere in the code. Without the second argument of `setVal` being a callback that'll run after the state is set, how can I execute something after a specific `setVal` function call sets the state ? 





"
facebook/react,2019-02-11 20:59:54,question,Prop reassignment in components,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Prop reassignment in components

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

1. Have a parent component that passes a prop to a child
2. Have a child assign the prop to the state default
3. Unpack the state value and use a`.push` to alter it
4. Watch in horror as both the prop and the state changes.

https://codesandbox.io/s/61x9k76v8w
Check child.js

**What is the expected behavior?**
Props should not be reassignable within mounted components

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All browsers all OS's React: 16.7.0
"
facebook/react,2019-02-08 13:56:21,question,"Under what circumstances, unstable_shouldYield will return true？","In Scheduler.js, 
```
function unstable_shouldYield() {
  return (
    !currentDidTimeout &&
    ((firstCallbackNode !== null &&
      firstCallbackNode.expirationTime < currentExpirationTime) ||
      shouldYieldToHost())
  );
}
```
unstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?
```
shouldYieldToHost = function() {
  return frameDeadline <= getCurrentTime();
};
```
shouldYieldToHost() return true means there's no time left in this idle period
currentDidTimeout is false means the schedule is not timeout
what relationship between them, why does unstable_shouldYield() depend on them?
"
facebook/react,2019-02-06 18:07:40,question,act cannot detect secondary updates,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

If a component performs a second (non user triggered) update, `act` cannot detect it and warns about the update.

For example, a button is clicked and updates its text. After a second, the button resets and its text reverts to its original state.

https://codesandbox.io/s/6xkyl37x7k?previewwindow=tests

(The reproduction is a bit contrived, but demonstrates the issue.)

**What is the expected behavior?**

The test runs without warning about being wrapped in `act`.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React & React DOM @ `16.8.0`"
facebook/react,2019-01-29 13:26:12,question,Unable to use useContext hook inline in Context.Provider,"**Do you want to request a *feature* or report a *bug*?**

Not sure if it is a bug or a feature yet. This relates to Hooks.

It could also be that this is all expected behaviour and one of the workarounds mentioned is required.

**What is the current behavior?**

I have a hook that depends on the `useContext` hook. Using it as follows works perfectly:

```
const MyHookedComponent = () => {
    const contextValue = useContext(DemoContext);

    return (
       //Do something with contextValue
    )
}

const MyContextProviderComponent = () => {

   return (
        <DemoContext.Provider value={someContextValue}>
                <MyHookedComponent />
         </DemoContext.Provider>
   )
}
```

What if I want to use the `getContext` hook inline in the same component that declares the `DemoContext.Provider` ?

```
const MyContextProviderComponent = () => {
       const contextValue = useContext(DemoContext); //Of course this fails due to the Context hierarchy.
   return (
        <DemoContext.Provider value={someContextValue}>
                     //Do something with contextValue
         </DemoContext.Provider>
   )
}
```

I seem to be unable to get this working.

**Please note**:
- I have a very good reason for solving my issue with Context and not passing props.
- The implementation I show above looks trivial and dumb but it is the simplest way to illustrate what the use case is. In my implementation the `Provider` sits in a complex component that does a lot of data management which I really want to happen at this level.
- The usual way to use this will be the first working version I noted above, it is only in the case where the user would want to use the hook inline inside the `Provider`.
- I have searched for a couple of hours and tried various configurations without success, so my apologies if this is a duplicate of another issue.

**What is the expected behavior?**

Any method to consume context inline in the provider using the same re-usable hook without having to revert back to render props.

I know I can solve this with **render props** but I am trying to convert an implementation using render props to hooks. I also know I can hoist the Context Provider higher up but in my implementation it would quadruple the code complexity to develop and maintain while introducing extra complexity into the user interface.

Also, by extracting the body inside the `Provider` to a new component I can also solve this but ideally I would not like to have a user do this for this use case.
"
facebook/react,2019-01-23 08:33:52,question,react-router can't pass Hooks,"This is actually an issue of react-router https://github.com/ReactTraining/react-router/issues/6555 but since it's the major routing lib I want to make you aware that there are issues when you want to pass custom hooks via props through your component tree.

Since routing (with react-router) is a regular use case and React Hooks is an easy/elegant way to manage state through the app they should work together. Otherwise React Hooks is about creating Hooks limited to just one component and you cannot share state/hooks component-wide. Maybe I didn't get something right and there is a way..."
facebook/react,2019-01-18 03:09:42,question,How will react solve nested contexts?,"```js
<context1.Provider value={value1}>
  <context2.Provider value={value2}>
    <context3.Provider value={value3}>
      <context4.Provider value={value4}>
        <context5.Provider value={value5}>

        </context5.Provider>
      </context4.Provider>
    </context3.Provider>
  </context2.Provider>
</context1.Provider>
```
```js
<context1.Consumer>
  {value1 => <context2.Consumer>
    {value2 => <context3.Consumer>
      {value3 => <context4.Consumer>
        {value4 => <context5.Consumer>
          {value5 => (
            null
          )}
        </context5.Consumer>}
      </context4.Consumer>}
    </context3.Consumer>}
  </context2.Consumer>}
</context1.Consumer>
```"
facebook/react,2019-01-08 22:06:01,question,Unable to catch Error emitted in componentDidMount,"**Do you want to request a *feature* or report a *bug*?**
Bug report.

**What is the current behavior?**
Error boundary handles `Error` emitted in `componentDidMount` and somewhy **rethrows** it.

```javascript
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = {error: null, errorInfo: null};
  }

  componentDidCatch(error, errorInfo) {
    this.setState({
      error: error,
      errorInfo: errorInfo,
    });
  }

  render() {
    if (this.state.errorInfo) {
    	return (
      	    <div>Ive handled an error!</div>
        );
    }

    return this.props.children;
  }
}

class MyComponent extends React.Component {
  componentDidMount(){
  	this.setState(()=>{
    	    throw new Error('This error somewhy was rethrown!')
        });
  }

  render() {
    return (
    	<div>This component is awesome</div>
    );
  }
}

ReactDOM.render((<ErrorBoundary><MyComponent/></ErrorBoundary>), document.getElementById('AppRoot'));
```

https://jsfiddle.net/xobotyi/96eqo8zp/

**What is the expected behavior?**
It should not rethrow the error.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React: 16.7.0
OS: Win 10 x64
Browser: Chromium 71.0.3578"
facebook/react,2018-12-20 13:40:35,question,useCallback/useEffect support custom comparator,"Currently we can pass an array as second argument when using `useCallback` or `useEffect` like below:

```js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
```

The problem is it only compare array items with `===`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

```js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
```
"
facebook/react,2018-12-01 09:52:16,question,setState hook inside useEffect can cause unavoidable warning  Can't perform a React state update,"**BUG**

**What is the current behavior?**

Example: https://codesandbox.io/s/6y1x2zr21n clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.`

The problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs:

```
SET VISIBLE BEFORE 
UNSUBSCRIBE 
Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.
    in Child (created by Holder)
SET VISIBLE AFTER 
```

In our case we have this even without RAF call, but on `transitionend` DOM event.
(It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens)
Seems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_)


Code
```javascript
import React from ""react"";
import ReactDOM from ""react-dom"";
import mitt from ""mitt"";

const emitter = mitt();

const Child = () => {
  const [visible, setVisible] = React.useReducer((s, a) => a, true);
  React.useEffect(() => {
    const handle = () => {
      console.log(""SET VISIBLE BEFORE"");
      setVisible(v => false); // <--- THIS CALL CAUSES UNSUBSCRIBE AND WARNING ABOUT STATE
      console.log(""SET VISIBLE AFTER"");
    };
    emitter.on(""B"", handle);
    return () => {
      console.log(""UNSUBSCRIBE"");
      emitter.off(""B"", handle);
    };
  }, []);

  return <div>{visible && <h1>CHILD TEXT</h1>}</div>;
};

const Holder = () => {
  const [refresh, setRefresh] = React.useState(0);
  const visible = React.useRef(true);
  React.useEffect(() => {
    if (refresh === 1) {
      visible.current = false;
      setRefresh(v => v + 1); // <--- This state change from effect caused problems
    }
    const handle = () => {
      setRefresh(v => v + 1);
    };
    emitter.on(""A"", handle);
    return () => {
      emitter.off(""A"", handle);
    };
  });

  return <div>{visible.current && <Child />}</div>;
};

function App() {
  return (
    <div>
      <Holder />
      <button
        onClick={() => {
          emitter.emit(""A"", {});

          requestAnimationFrame(() => {
            emitter.emit(""B"", {});
          });
        }}
      >
        OK
      </button>
    </div>
  );
}

const rootElement = document.getElementById(""root"");
ReactDOM.render(<App />, rootElement);

```

**What is the expected behavior?**

Do not provide warning if unsubscription is called during ""setState"" call.


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.7.0-alpha.2
"
facebook/react,2018-11-24 20:56:14,question,getDerivedStateFromProps is user-hostile,"So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs, https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns, impossible for non-trivial cases. 

Imagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied? 

In my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state. 

This leads to some problems: 
1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective. 
2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a ""change"" event firing on the `DataSource`? 

This matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped. 

Here's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above: 
```
function withDataLoading(Component, DataSource, getDataFunc) {

  return class extends React.PureComponent {
    componentDidMount() {
      // Subscribe to changes
      DataSource.addChangeListener(this.handleChange);
    }
  
    componentWillUnmount() {
      // Clean up listener
      DataSource.removeChangeListener(this.handleChange);
    }

    componentWillReceiveProps(props) {
      //Unconditionally update state and rerender since the props changed
      const possiblyNewData = getDataFunc(DataSource, props, this)
      this.setState(possiblyNewData);
      //Remember some metadata about what we fetched for next time
      this.bookkeeping = DataSource.bookkeepingData();
    }
  
    handleChange() {
      // Update component state whenever the data source changes
      const possiblyNewData = getDataFunc(DataSource, this.props, this)
      if(DataSource.didIFetchNewData(this.bookkeeping)) {
        //The DataSource had updated data in it, so rerender
        this.setState(possiblyNewData);
        //Remember some metadata about what we fetched for next time
        this.bookkeeping = DataSource.bookkeepingData();
      } else {
        //No new data was fetched, so don't update State and don't rerender
        //Do nothing…
      }
    }

    render() {
      <Component data={this.state}/>
    }
  }
}
```

Notice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API. "
facebook/react,2018-10-29 12:13:54,question,Cases where hooks don't currently provide a good answer vs HOC,"(unsure if this is the right place, so trying it out)

I've noticed that the new React Hooks feature is aiming at providing an alternative composition pattern to HOC and render functions, but I believe that many of the use cases solved by HOC (at the framework level) cannot currently be addressed by the new hooks API. 

Specifically, there is not way to incorporate React Hooks with React.memo. Unless I am incorrect, this means that any system that would like to implement optimisations based on external context, such as the react-redux `connect` function (that uses `mapStateToProps` to implement an efficient `shouldComponentUpdate`) will still need to rely on a HOC/render-prop to automate this optimisation.

The reason I am bringing this up is because one of the main benefits stated in the documentation is to reduce framework level use of HOC that ""pollute"" the tree, of which the react-redux connect HOC is probably the most prevalent use case. 

Additionally redux (and `useRedux`) are specifically brought up as an exemplary use case, although with the current system it will cause large optimisation issues (since with no optimised `shouldComponentUpdate`, every ""connected"" component will re-render on every state change).
(Although this might fit into the documentation repo, this is a discussion / opinion and I do not feel it is a ""mistake"" that I should report, but rather a discussion on importance).

An example solution for this could be if there was a way to use contexts in `React.memo` (which unless I'm incorrect only have access to `props` and `prevProps`)"
facebook/react,2018-09-30 22:49:03,question,[npm:create-react-class] No way to implement getDerivedStateFromProps,"There seems to be no way to implement class methods such as `getDerivedStateFromProps` and a few others.

Am I overlooking something?

There is no mention of it here either: https://reactjs.org/docs/react-without-es6.html"
facebook/react,2018-09-14 02:53:16,question,Element attributes be removed silently in frameset tag,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
In some historical reason, i am still using obsolete tag `frameset` in my project. And when i render my component which includes `frameset` tag in react, some attributes are ignored, like `rows`, `cols`.
Could anyone tell me why and how to solve it by no hacking way? Thx.

**input**
```javascript
export default class obsoleteElment extends React.Component {

  render() {
    return (
      <html>
      <head>
        <meta httpEquiv=""content-type"" content=""text/html; charset=UTF-8"" />
          <title>old page</title>
      </head>
      <frameset id=""frame-container"" rows='60,*' frameBorder=""0"" border=""0""  cols=""180,11,*"">
      </frameset>
      </html>
    )
  }
}
```

**output**
```javascript
      <html>
      <head>
        <meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"" />
          <title>old page</title>
      </head>
      <frameset id=""frame-container"" frameBorder=""0"" border=""0"">
      </frameset>
      </html>
```

**expect**
```javascript
      <html>
      <head>
        <meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"" />
          <title>old page</title>
      </head>
      <frameset id=""frame-container"" rows='60,*' frameBorder=""0"" border=""0""  cols=""180,11,*"">
      </frameset>
      </html>
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

**react version**
![image](https://user-images.githubusercontent.com/17465046/45526873-9b08db00-b80b-11e8-980b-86407da1934c.png)

**node environment**
![image](https://user-images.githubusercontent.com/17465046/45526918-ca1f4c80-b80b-11e8-911d-cf0bb3ab9b32.png)
![image](https://user-images.githubusercontent.com/17465046/45526934-d905ff00-b80b-11e8-87d4-306ca3a998c3.png)

**OS**
![image](https://user-images.githubusercontent.com/17465046/45526979-18cce680-b80c-11e8-8928-ee784a5f0a7d.png)
"
facebook/react,2018-08-30 20:32:19,question,Access React component underlying DOM tree,"**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
Form component has ""form field"" children (Input(), Checkbox(), etc) that are validated against some custom rules when form is submitted. Validation works fine.

**What is the expected behavior?**
 If the form is invalid, I would like to scroll the page to the first invalid element after the form is submitted but unfortunately components do not expose the underlying DOM three (except via the Fiber object) and I cannot get the ""ref"" of any component, which makes scrolling not possible since I don't have the DOM reference.

I am trying to avoid ref forwarding on ""form field"" components because I would like the Form to handle all validation related code (for encapsulation purposes and in case I want to publish this as a library, for instance).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react: ""^16.4.0""

Is there any way to achieve this?
"
facebook/react,2018-08-26 17:31:50,question,Question on reconciliation," I think I understood reconciliation in react however there is one thing I would like to clarify.
Let's say on first render, we render:

```
<ul>
  <li>Duke</li> // key 0
  <li>Villanova</li> // key 1
</ul>
```

And on next render


```
<ul>
  <li>Connecticut</li> // key 0
  <li>Duke</li> // key 1
  <li>Villanova</li> // key 2
</ul>
```

If I understood reconciliation correctly on the second render, react will check that **types (e.g. `<li>`) and keys of first two items from first and second render match**, hence it will add only the new item with key 2 to the new output, hence generate following result:

```
<ul>
  <li>Duke</li> // key 0
  <li>Villanova</li> // key 1
  <li>Villanova</li> // key 2
</ul>
```

However I think this is not what react will generate and it seems then there is some issue with my understanding (especially the bold part in the previous paragraph). Can someone explain what I missed in my understanding?"
facebook/react,2018-08-23 09:15:50,question,Get keys in react-reconciler,"I am struggling to implement reusable views on mobile platforms and to make it i need to get key values (explicitly set and generated) in react-reconciler to match two different view trees somewhere outside react.

Is there a way to achieve this?

Thanks!"
facebook/react,2018-08-21 04:33:25,question,how map ? render An Array Of Elements ,"  
 **What is the current behavior?**
   react16+ support return array components, for example:
   render() {
      return [
          《Li》1《/Li》
          《Li》2《/Li》
          《Li》3《/Li》
      ]
   }
   export default ArrayDemo
   ----------------
   i want to map it with React.Children.map,
  for example:
  import ArrayDemo from 'xxx/xxx';
  ....
  React.Children.map(ArrayDemo,(item, index) => {
      return 《Col span={6}》{item}《/Col》
  })
  ....

  -------------------
  but ArrayDemo has become a single element; React.Children.toArray got [0] only;

**What is the expected behavior?**

  i expected since React can return array;  how can i map it? for sometimes i want to wrap each
 element in array ;

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

   16.4+


---------------------------------------
or am i missing something important?    thx a lot!

"
facebook/react,2018-08-14 19:44:28,question,"Avoid reconciliation, alternative component interface","Hello. I want to ask a question about a way to avoid reconciliation process.

Today I can see the following process:

1. Component wants to re-render.
2. Component render method provides new virtual dom.
3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one.

Please fix me if I am wrong, I am not familiar with react codebase.

I can see an information in [docs](https://reactjs.org/docs/reconciliation.html):

> you don’t have to worry about exactly what changes on every update

But your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution.

For example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently.

![append](https://user-images.githubusercontent.com/941925/44114154-05201870-a013-11e8-9c7a-2e5ed890e372.jpg)

Is there a way for user to provide morph method? I can imagine some api like:

```
// render is not defined

morph(component) {
  if (...) {
    component.append(<Item />);
  } else {
    (<Item />).prependTo(component.find({ key: '5' }));
  }
}

```

Do you have any plans to implement it? Thank you. Please feel free to ask any questions."
facebook/react,2018-06-05 23:25:50,question,componentWillUpdate discussion,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature : componentWillUpdate Discussion

**What is the current behavior?**

The current behavior calls the function before re-rendering the render target however there is no indication for when the re-render method should be called

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

The expected behavior should call the function before re-rendering the render target if there is no returned conditional statement and if there is, true should trigger the re-render and false should not

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.4.0

I have a few questions before I try to solve this problem and it gets rejected. I'm assuming that the team has decided to move in the direction of removing ""Will-Updates"" from React all together and have labeled them ""Unsafe"". I've seen a lot of issues with those functionalities before as well. I was curious if providing a conditional statement inside those functions would satisfy the unexpected renders. ""shouldComponentUpdate"" does trigger when to call these functions however in those functions that ""will"" run before the render can always be controlled with a conditional statement of it's own. I'm getting comfortable with the code base however I'm curious if the team is removing that functionality all together and using the ""static"" function ""getDerivedStateFromProps"" instead. Has a React lover it is a little confusing and may break a lot of legacy code when updating versions. I believe that may solve the problem of unexpected renders after a ""will"" change lifecycle event.

I was curious if that was the case, and removing ""will"" lifecycles is the next steps for React then how will the ""did"" lifecycles work instead?

I love React and I'm just curious about the future for React as a whole. I'd love to tackle any bugs or feature requests when I have time. I will be writing clean code and create tests for new features or bugs as well."
facebook/react,2018-05-26 23:38:59,question,Suspense: timeout expiration and siblings rendering issues,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Code for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.

This is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.

I can see my use of `<Timeout />` doesn't really care about `ms` I'm passing — it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.

There is content that is placed next to an async component (the one that's going to be suspended).

https://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56

Looking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.

**What is the expected behavior?**

`<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.

I built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.

I overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug. "
facebook/react,2018-05-02 20:12:18,question,Use and set a component's state within setInterval function,"This is a question, so I apologize if this isn't the best place to ask.
I'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem.

I've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):
[Stackoverflow Answer](https://stackoverflow.com/questions/43428456/do-i-need-to-use-setstatefunction-overload-in-this-case?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)
```
sectionTimerHandler = () => {
    const elapsedSectionTimeMs = this.state.elapsedSectionTimeMs + 1000;
    // Do some stuff with elapsedSectionTimeMs
    this.setState({elapsedSectionTimeMs});
}

restartSectionTimer = () => {
    if (this.sectionTimeIntervalId !== 0) {
        window.clearInterval(this.sectionTimeIntervalId);
    }
    this.sectionTimeIntervalId = window.setInterval(this.sectionTimerHandler, 1000);
    this.setState({ elapsedSectionTimeMs: 0 });
}
```

or would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function?

```
 this.setState((prevState: AssessmentState) => {
      return {
          elapsedSectionTimeMs: prevState.elapsedSectionTimeMs + 1000
      };
});
```"
facebook/react,2018-05-02 13:55:21,question,Context API bitmask related questions,"I'm playing with Context API bitmask feature to bail out unwanted re-render.

I have a dynamic model ( a JSON object) as context value. By dynamic i meant , the number of keys and structure of the JSON object is unknown. But when the JSON object changed , i know which key is changed. It seems difficult to turn the unknown keys to static pre-defined bitmasks. But I thought such use case is very common, and the bail-out feature should handle it easily by just matching the key. 

Also I notice default changedBits and observedBits is MAX_SIGNED_31_BIT_INT. Does this mean it has a limitation up to 31 type of context change?"
facebook/react,2018-04-10 15:40:31,question,[Question] Context provider state initialisation.,"Consider a component wrapping a context provider:

```js
class ValueWrapper extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: null,
      setValue: this.setValue,
    };
  }

  setValue = (value) => {
    this.setState({ value });
  };

  render = () => (
    <Context.Provider value={this.state}>
      {this.props.children}
    </Context.Provider>
  );
}
```

A consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render:

```js
class ValueUpdater extends React.Component {
  state = {
    inputValue: 0,
  };

  handleInputChange = e => {
    this.setState({ inputValue: e.target.value });
  };

  render = () => (
    <Context.Consumer>
      {({ value, setValue }) => {
        if (!value) {
          setValue(this.state.inputValue);
        }

        return (
          <div>
            <input type=""text"" value={value} onChange={handleInputChange}/>
            <button onClick={() => setValue(this.state.inputValue)}>Update value</button>
          </div>
        );
      }}
    </Context.Consumer>
  )
};
```

But this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component:

```js
  render = () => (
    <Context.Consumer>
      {({ value, setValue }) => (
          <ValueUpdaterInput setValue={ setValue } value={ value } />
      )}
    </Context.Consumer>
  )
```

But if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time?

Is there a better pattern than this, or am I trying to use context inappropriately?"
facebook/react,2018-03-18 12:06:40,question,Is there a way to access new context api within ComponentDidMount?,"We are building a react mapbox gl module and we use clone and inject props today.

We were looking into using the 16.2.0 context api but I saw that it will have a new one on 16.3.0 but I can’t seem to find a way to read context details
On componentDidMount lifecycle (which makes sense for me to use on the map implementation).

Is there a way around this ?"
facebook/react,2018-03-12 16:16:24,question,Potential Future Bug in getEventKey for Edge with Synthetic Event normalization.,"**Bug**

**Current behavior**
React currently normalizes keyboard events cross-browser by falling back on the native KeyboardEvent.keyCode property and using a dictionary object to normalize the key. As noted in the source, getEventKey is used for ""Normalization of deprecated HTML5 `key` values"".

Edge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent.keyCode. KeyboardEvent.keyCode is deprecated and may be dropped at any time.

Microsoft as per https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15907408/ have fixed this issue, but it has not yet been released to insider preview releases. This means there is the potential for the KeyboardEvent.keyCode to be removed from Edge before the fix is made public. It may be a good idea to not rely on keyCode in this instance.

Refer to https://github.com/facebook/react/blob/5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784/packages/react-dom/src/events/getEventKey.js Line 103

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react-dom version 16.2.0, potentially affects future versions of Edge.
"
facebook/react,2018-02-27 08:05:21,question,state change in td element,"Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.

Following is sample the code :

Working code :
`<tr key={id}> `
`<td> <input  value={this.state.price[id]}/> </td>`

Failing code :
`<tr key={id}> `
`<td> {this.state.price[id]} </td>`"
facebook/react,2018-02-05 19:36:12,question,Getting started docs are terrible,"I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest. All the docs are now is just links to other websites without any instructions on how to get a react project running. I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions. What happened to the docs, when did they become so useless?

There needs to be a step by step guide added back to the docs, a guide that will get you from having nothing to running it in the browser instead of just links to other websites that don't have anything to do with react. I remember back in react 15, you could run through the guide and have a hello world app running within 10 minutes no problems, I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running. The instructions used to actually be instructions, basically saying, install this, then that, then run this command in terminal, then do this and so on. The docs now just say, well you can use this, then has a link to a site that has nothing to do with react, there is not even any sort of instruction on the react website on what to do with that, just the link without any context around it. Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running?"
facebook/react,2018-01-30 14:39:07,question,Concating react with other resources,"Hi.

I want to use many libraries and frameworks in my project.

Can I concat React with other framework like angular, vue, ember...?

"
facebook/react,2018-01-26 16:58:31,question,can't edit the wiki,"Hello,
I can't edit the wiki to add my website to the list there, is editing disabled?"
facebook/react,2018-01-25 19:11:26,question,TypeError: Cannot read property 'state' of undefined with create-react-class,"I am currently attempting to create a button which is red with the text ""Yes"" that when you click on it the button changes to a green color with the text ""Confirm?"" before the final stage in which an action takes place. Where I am currently at is defining `buttonColor` as a state which changes on the click of the button; the initial color should be `#FD8F83` and the final color after the click should be `#A4D87C`. However, I am currently getting the error ""TypeError: Cannot read property 'state' of undefined"" pointing to the `style={{backgroundColor: this.state.buttonColor}} ` line whenever the code is compiled on the webpage. 

**Defining initial state and behavior on click:**
```
getInitialState: function() {
    	return {
    		buttonColor: ""#FD8F83""
    	};
},
handleClick(color) {
    	this.setState({
		buttonColor: color
	}); 
}
```

**Code inside table in render():** 
```
<td>
	<button 
		className=""removeButton"" 
		style={{backgroundColor: this.state.buttonColor}} 
		onClick={function(){this.handleClick(""#A4D87C"")}}>
		Yes
	</button>
</td>
```

Does anyone have any ideas why this is? I am brand new to React so I apologize if it's obvious. I also learned React using createClass so I've been trying to piece together how to make this work with the new `create-react-class` package. Any advice is greatly appreciated! 

React: `^16.2.0`
Chrome: `Version 63.0.3239.132 (Official Build) (64-bit)`
"
facebook/react,2017-11-28 19:21:46,question,Sluggish scrolling when rendering table with large dataset in React,"So I'm creating an application with real-time streaming data in a table using react (v16.1.1). The number of rows shown at a time can be rather large (400+ rows) and when those situations occur, the scrolling behavior on browsers (desktop & mobile) really takes a hit and staggers when attempting to browse the content. Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table? 

I'm expecting React to be able to efficiently draw/redraw these elements with ease but that doesn't appear to be the case. I tried using JSFiddle to recreate the scenario but did not have much success.
"
facebook/react,2017-11-24 10:47:19,question,forceUpdate recalls all ref callbacks,"**Do you want to request a *feature* or report a *bug*?**

Bug, maybe

**What is the current behavior?**

On calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

https://codepen.io/TrySound/pen/mqKqeB?editors=0012

**What is the expected behavior?**

Do not recall refs

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react 16.1.1
chrome 62"
facebook/react,2017-11-20 18:53:12,question,can't access discuss react,"I know this is not related to react directly but didn't know where to turn to.
Am I the only one who can't access/login to discuss.reactjs.org? (for quite some time already)
I get error:
_This page isn’t working. discuss.reactjs.org is currently unable to handle this request. HTTP ERROR 500_
and sometimes when I retry this error:
_Sorry, there was an error authorizing your account. Perhaps you did not approve authorization?_"
